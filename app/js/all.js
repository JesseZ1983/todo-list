(function(){function t(t){function e(e,n,r,i,s,a){for(;s>=0&&a>s;s+=t){var o=i?i[s]:s;r=n(r,e[o],o,e)}return r}return function(n,r,i,s){r=_(r,s,4);var a=!M(n)&&y.keys(n),o=(a||n).length,u=t>0?0:o-1;return arguments.length<3&&(i=n[a?a[u]:u],u+=t),e(n,r,i,a,u,o)}}function e(t){return function(e,n,r){n=k(n,r);for(var i=P(e),s=t>0?0:i-1;s>=0&&i>s;s+=t)if(n(e[s],s,e))return s;return-1}}function n(t,e,n){return function(r,i,s){var a=0,o=P(r);if("number"==typeof s)t>0?a=s>=0?s:Math.max(s+o,a):o=s>=0?Math.min(s+1,o):s+o+1;else if(n&&s&&o)return s=n(r,i),r[s]===i?s:-1;if(i!==i)return s=e(l.call(r,a,o),y.isNaN),s>=0?s+a:-1;for(s=t>0?a:o-1;s>=0&&o>s;s+=t)if(r[s]===i)return s;return-1}}function r(t,e){var n=A.length,r=t.constructor,i=y.isFunction(r)&&r.prototype||o,s="constructor";for(y.has(t,s)&&!y.contains(e,s)&&e.push(s);n--;)s=A[n],s in t&&t[s]!==i[s]&&!y.contains(e,s)&&e.push(s)}var i=this,s=i._,a=Array.prototype,o=Object.prototype,u=Function.prototype,c=a.push,l=a.slice,h=o.toString,p=o.hasOwnProperty,f=Array.isArray,d=Object.keys,m=u.bind,g=Object.create,v=function(){},y=function(t){return t instanceof y?t:this instanceof y?void(this._wrapped=t):new y(t)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=y),exports._=y):i._=y,y.VERSION="1.8.3";var _=function(t,e,n){if(void 0===e)return t;switch(null==n?3:n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)};case 4:return function(n,r,i,s){return t.call(e,n,r,i,s)}}return function(){return t.apply(e,arguments)}},k=function(t,e,n){return null==t?y.identity:y.isFunction(t)?_(t,e,n):y.isObject(t)?y.matcher(t):y.property(t)};y.iteratee=function(t,e){return k(t,e,1/0)};var b=function(t,e){return function(n){var r=arguments.length;if(2>r||null==n)return n;for(var i=1;r>i;i++)for(var s=arguments[i],a=t(s),o=a.length,u=0;o>u;u++){var c=a[u];e&&void 0!==n[c]||(n[c]=s[c])}return n}},S=function(t){if(!y.isObject(t))return{};if(g)return g(t);v.prototype=t;var e=new v;return v.prototype=null,e},w=function(t){return function(e){return null==e?void 0:e[t]}},x=Math.pow(2,53)-1,P=w("length"),M=function(t){var e=P(t);return"number"==typeof e&&e>=0&&x>=e};y.each=y.forEach=function(t,e,n){e=_(e,n);var r,i;if(M(t))for(r=0,i=t.length;i>r;r++)e(t[r],r,t);else{var s=y.keys(t);for(r=0,i=s.length;i>r;r++)e(t[s[r]],s[r],t)}return t},y.map=y.collect=function(t,e,n){e=k(e,n);for(var r=!M(t)&&y.keys(t),i=(r||t).length,s=Array(i),a=0;i>a;a++){var o=r?r[a]:a;s[a]=e(t[o],o,t)}return s},y.reduce=y.foldl=y.inject=t(1),y.reduceRight=y.foldr=t(-1),y.find=y.detect=function(t,e,n){var r;return r=M(t)?y.findIndex(t,e,n):y.findKey(t,e,n),void 0!==r&&-1!==r?t[r]:void 0},y.filter=y.select=function(t,e,n){var r=[];return e=k(e,n),y.each(t,function(t,n,i){e(t,n,i)&&r.push(t)}),r},y.reject=function(t,e,n){return y.filter(t,y.negate(k(e)),n)},y.every=y.all=function(t,e,n){e=k(e,n);for(var r=!M(t)&&y.keys(t),i=(r||t).length,s=0;i>s;s++){var a=r?r[s]:s;if(!e(t[a],a,t))return!1}return!0},y.some=y.any=function(t,e,n){e=k(e,n);for(var r=!M(t)&&y.keys(t),i=(r||t).length,s=0;i>s;s++){var a=r?r[s]:s;if(e(t[a],a,t))return!0}return!1},y.contains=y.includes=y.include=function(t,e,n,r){return M(t)||(t=y.values(t)),("number"!=typeof n||r)&&(n=0),y.indexOf(t,e,n)>=0},y.invoke=function(t,e){var n=l.call(arguments,2),r=y.isFunction(e);return y.map(t,function(t){var i=r?e:t[e];return null==i?i:i.apply(t,n)})},y.pluck=function(t,e){return y.map(t,y.property(e))},y.where=function(t,e){return y.filter(t,y.matcher(e))},y.findWhere=function(t,e){return y.find(t,y.matcher(e))},y.max=function(t,e,n){var r,i,s=-(1/0),a=-(1/0);if(null==e&&null!=t){t=M(t)?t:y.values(t);for(var o=0,u=t.length;u>o;o++)r=t[o],r>s&&(s=r)}else e=k(e,n),y.each(t,function(t,n,r){i=e(t,n,r),(i>a||i===-(1/0)&&s===-(1/0))&&(s=t,a=i)});return s},y.min=function(t,e,n){var r,i,s=1/0,a=1/0;if(null==e&&null!=t){t=M(t)?t:y.values(t);for(var o=0,u=t.length;u>o;o++)r=t[o],s>r&&(s=r)}else e=k(e,n),y.each(t,function(t,n,r){i=e(t,n,r),(a>i||i===1/0&&s===1/0)&&(s=t,a=i)});return s},y.shuffle=function(t){for(var e,n=M(t)?t:y.values(t),r=n.length,i=Array(r),s=0;r>s;s++)e=y.random(0,s),e!==s&&(i[s]=i[e]),i[e]=n[s];return i},y.sample=function(t,e,n){return null==e||n?(M(t)||(t=y.values(t)),t[y.random(t.length-1)]):y.shuffle(t).slice(0,Math.max(0,e))},y.sortBy=function(t,e,n){return e=k(e,n),y.pluck(y.map(t,function(t,n,r){return{value:t,index:n,criteria:e(t,n,r)}}).sort(function(t,e){var n=t.criteria,r=e.criteria;if(n!==r){if(n>r||void 0===n)return 1;if(r>n||void 0===r)return-1}return t.index-e.index}),"value")};var D=function(t){return function(e,n,r){var i={};return n=k(n,r),y.each(e,function(r,s){var a=n(r,s,e);t(i,r,a)}),i}};y.groupBy=D(function(t,e,n){y.has(t,n)?t[n].push(e):t[n]=[e]}),y.indexBy=D(function(t,e,n){t[n]=e}),y.countBy=D(function(t,e,n){y.has(t,n)?t[n]++:t[n]=1}),y.toArray=function(t){return t?y.isArray(t)?l.call(t):M(t)?y.map(t,y.identity):y.values(t):[]},y.size=function(t){return null==t?0:M(t)?t.length:y.keys(t).length},y.partition=function(t,e,n){e=k(e,n);var r=[],i=[];return y.each(t,function(t,n,s){(e(t,n,s)?r:i).push(t)}),[r,i]},y.first=y.head=y.take=function(t,e,n){return null!=t?null==e||n?t[0]:y.initial(t,t.length-e):void 0},y.initial=function(t,e,n){return l.call(t,0,Math.max(0,t.length-(null==e||n?1:e)))},y.last=function(t,e,n){return null!=t?null==e||n?t[t.length-1]:y.rest(t,Math.max(0,t.length-e)):void 0},y.rest=y.tail=y.drop=function(t,e,n){return l.call(t,null==e||n?1:e)},y.compact=function(t){return y.filter(t,y.identity)};var E=function(t,e,n,r){for(var i=[],s=0,a=r||0,o=P(t);o>a;a++){var u=t[a];if(M(u)&&(y.isArray(u)||y.isArguments(u))){e||(u=E(u,e,n));var c=0,l=u.length;for(i.length+=l;l>c;)i[s++]=u[c++]}else n||(i[s++]=u)}return i};y.flatten=function(t,e){return E(t,e,!1)},y.without=function(t){return y.difference(t,l.call(arguments,1))},y.uniq=y.unique=function(t,e,n,r){y.isBoolean(e)||(r=n,n=e,e=!1),null!=n&&(n=k(n,r));for(var i=[],s=[],a=0,o=P(t);o>a;a++){var u=t[a],c=n?n(u,a,t):u;e?(a&&s===c||i.push(u),s=c):n?y.contains(s,c)||(s.push(c),i.push(u)):y.contains(i,u)||i.push(u)}return i},y.union=function(){return y.uniq(E(arguments,!0,!0))},y.intersection=function(t){for(var e=[],n=arguments.length,r=0,i=P(t);i>r;r++){var s=t[r];if(!y.contains(e,s)){for(var a=1;n>a&&y.contains(arguments[a],s);a++);a===n&&e.push(s)}}return e},y.difference=function(t){var e=E(arguments,!0,!0,1);return y.filter(t,function(t){return!y.contains(e,t)})},y.zip=function(){return y.unzip(arguments)},y.unzip=function(t){for(var e=t&&y.max(t,P).length||0,n=Array(e),r=0;e>r;r++)n[r]=y.pluck(t,r);return n},y.object=function(t,e){for(var n={},r=0,i=P(t);i>r;r++)e?n[t[r]]=e[r]:n[t[r][0]]=t[r][1];return n},y.findIndex=e(1),y.findLastIndex=e(-1),y.sortedIndex=function(t,e,n,r){n=k(n,r,1);for(var i=n(e),s=0,a=P(t);a>s;){var o=Math.floor((s+a)/2);n(t[o])<i?s=o+1:a=o}return s},y.indexOf=n(1,y.findIndex,y.sortedIndex),y.lastIndexOf=n(-1,y.findLastIndex),y.range=function(t,e,n){null==e&&(e=t||0,t=0),n=n||1;for(var r=Math.max(Math.ceil((e-t)/n),0),i=Array(r),s=0;r>s;s++,t+=n)i[s]=t;return i};var C=function(t,e,n,r,i){if(!(r instanceof e))return t.apply(n,i);var s=S(t.prototype),a=t.apply(s,i);return y.isObject(a)?a:s};y.bind=function(t,e){if(m&&t.bind===m)return m.apply(t,l.call(arguments,1));if(!y.isFunction(t))throw new TypeError("Bind must be called on a function");var n=l.call(arguments,2),r=function(){return C(t,r,e,this,n.concat(l.call(arguments)))};return r},y.partial=function(t){var e=l.call(arguments,1),n=function(){for(var r=0,i=e.length,s=Array(i),a=0;i>a;a++)s[a]=e[a]===y?arguments[r++]:e[a];for(;r<arguments.length;)s.push(arguments[r++]);return C(t,n,this,this,s)};return n},y.bindAll=function(t){var e,n,r=arguments.length;if(1>=r)throw new Error("bindAll must be passed function names");for(e=1;r>e;e++)n=arguments[e],t[n]=y.bind(t[n],t);return t},y.memoize=function(t,e){var n=function(r){var i=n.cache,s=""+(e?e.apply(this,arguments):r);return y.has(i,s)||(i[s]=t.apply(this,arguments)),i[s]};return n.cache={},n},y.delay=function(t,e){var n=l.call(arguments,2);return setTimeout(function(){return t.apply(null,n)},e)},y.defer=y.partial(y.delay,y,1),y.throttle=function(t,e,n){var r,i,s,a=null,o=0;n||(n={});var u=function(){o=n.leading===!1?0:y.now(),a=null,s=t.apply(r,i),a||(r=i=null)};return function(){var c=y.now();o||n.leading!==!1||(o=c);var l=e-(c-o);return r=this,i=arguments,0>=l||l>e?(a&&(clearTimeout(a),a=null),o=c,s=t.apply(r,i),a||(r=i=null)):a||n.trailing===!1||(a=setTimeout(u,l)),s}},y.debounce=function(t,e,n){var r,i,s,a,o,u=function(){var c=y.now()-a;e>c&&c>=0?r=setTimeout(u,e-c):(r=null,n||(o=t.apply(s,i),r||(s=i=null)))};return function(){s=this,i=arguments,a=y.now();var c=n&&!r;return r||(r=setTimeout(u,e)),c&&(o=t.apply(s,i),s=i=null),o}},y.wrap=function(t,e){return y.partial(e,t)},y.negate=function(t){return function(){return!t.apply(this,arguments)}},y.compose=function(){var t=arguments,e=t.length-1;return function(){for(var n=e,r=t[e].apply(this,arguments);n--;)r=t[n].call(this,r);return r}},y.after=function(t,e){return function(){return--t<1?e.apply(this,arguments):void 0}},y.before=function(t,e){var n;return function(){return--t>0&&(n=e.apply(this,arguments)),1>=t&&(e=null),n}},y.once=y.partial(y.before,2);var O=!{toString:null}.propertyIsEnumerable("toString"),A=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];y.keys=function(t){if(!y.isObject(t))return[];if(d)return d(t);var e=[];for(var n in t)y.has(t,n)&&e.push(n);return O&&r(t,e),e},y.allKeys=function(t){if(!y.isObject(t))return[];var e=[];for(var n in t)e.push(n);return O&&r(t,e),e},y.values=function(t){for(var e=y.keys(t),n=e.length,r=Array(n),i=0;n>i;i++)r[i]=t[e[i]];return r},y.mapObject=function(t,e,n){e=k(e,n);for(var r,i=y.keys(t),s=i.length,a={},o=0;s>o;o++)r=i[o],a[r]=e(t[r],r,t);return a},y.pairs=function(t){for(var e=y.keys(t),n=e.length,r=Array(n),i=0;n>i;i++)r[i]=[e[i],t[e[i]]];return r},y.invert=function(t){for(var e={},n=y.keys(t),r=0,i=n.length;i>r;r++)e[t[n[r]]]=n[r];return e},y.functions=y.methods=function(t){var e=[];for(var n in t)y.isFunction(t[n])&&e.push(n);return e.sort()},y.extend=b(y.allKeys),y.extendOwn=y.assign=b(y.keys),y.findKey=function(t,e,n){e=k(e,n);for(var r,i=y.keys(t),s=0,a=i.length;a>s;s++)if(r=i[s],e(t[r],r,t))return r},y.pick=function(t,e,n){var r,i,s={},a=t;if(null==a)return s;y.isFunction(e)?(i=y.allKeys(a),r=_(e,n)):(i=E(arguments,!1,!1,1),r=function(t,e,n){return e in n},a=Object(a));for(var o=0,u=i.length;u>o;o++){var c=i[o],l=a[c];r(l,c,a)&&(s[c]=l)}return s},y.omit=function(t,e,n){if(y.isFunction(e))e=y.negate(e);else{var r=y.map(E(arguments,!1,!1,1),String);e=function(t,e){return!y.contains(r,e)}}return y.pick(t,e,n)},y.defaults=b(y.allKeys,!0),y.create=function(t,e){var n=S(t);return e&&y.extendOwn(n,e),n},y.clone=function(t){return y.isObject(t)?y.isArray(t)?t.slice():y.extend({},t):t},y.tap=function(t,e){return e(t),t},y.isMatch=function(t,e){var n=y.keys(e),r=n.length;if(null==t)return!r;for(var i=Object(t),s=0;r>s;s++){var a=n[s];if(e[a]!==i[a]||!(a in i))return!1}return!0};var T=function(t,e,n,r){if(t===e)return 0!==t||1/t===1/e;if(null==t||null==e)return t===e;t instanceof y&&(t=t._wrapped),e instanceof y&&(e=e._wrapped);var i=h.call(t);if(i!==h.call(e))return!1;switch(i){case"[object RegExp]":case"[object String]":return""+t==""+e;case"[object Number]":return+t!==+t?+e!==+e:0===+t?1/+t===1/e:+t===+e;case"[object Date]":case"[object Boolean]":return+t===+e}var s="[object Array]"===i;if(!s){if("object"!=typeof t||"object"!=typeof e)return!1;var a=t.constructor,o=e.constructor;if(a!==o&&!(y.isFunction(a)&&a instanceof a&&y.isFunction(o)&&o instanceof o)&&"constructor"in t&&"constructor"in e)return!1}n=n||[],r=r||[];for(var u=n.length;u--;)if(n[u]===t)return r[u]===e;if(n.push(t),r.push(e),s){if(u=t.length,u!==e.length)return!1;for(;u--;)if(!T(t[u],e[u],n,r))return!1}else{var c,l=y.keys(t);if(u=l.length,y.keys(e).length!==u)return!1;for(;u--;)if(c=l[u],!y.has(e,c)||!T(t[c],e[c],n,r))return!1}return n.pop(),r.pop(),!0};y.isEqual=function(t,e){return T(t,e)},y.isEmpty=function(t){return null==t?!0:M(t)&&(y.isArray(t)||y.isString(t)||y.isArguments(t))?0===t.length:0===y.keys(t).length},y.isElement=function(t){return!(!t||1!==t.nodeType)},y.isArray=f||function(t){return"[object Array]"===h.call(t)},y.isObject=function(t){var e=typeof t;return"function"===e||"object"===e&&!!t},y.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(t){y["is"+t]=function(e){return h.call(e)==="[object "+t+"]"}}),y.isArguments(arguments)||(y.isArguments=function(t){return y.has(t,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(y.isFunction=function(t){return"function"==typeof t||!1}),y.isFinite=function(t){return isFinite(t)&&!isNaN(parseFloat(t))},y.isNaN=function(t){return y.isNumber(t)&&t!==+t},y.isBoolean=function(t){return t===!0||t===!1||"[object Boolean]"===h.call(t)},y.isNull=function(t){return null===t},y.isUndefined=function(t){return void 0===t},y.has=function(t,e){return null!=t&&p.call(t,e)},y.noConflict=function(){return i._=s,this},y.identity=function(t){return t},y.constant=function(t){return function(){return t}},y.noop=function(){},y.property=w,y.propertyOf=function(t){return null==t?function(){}:function(e){return t[e]}},y.matcher=y.matches=function(t){return t=y.extendOwn({},t),function(e){return y.isMatch(e,t)}},y.times=function(t,e,n){var r=Array(Math.max(0,t));e=_(e,n,1);for(var i=0;t>i;i++)r[i]=e(i);return r},y.random=function(t,e){return null==e&&(e=t,t=0),t+Math.floor(Math.random()*(e-t+1))},y.now=Date.now||function(){return(new Date).getTime()};var I={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},N=y.invert(I),$=function(t){var e=function(e){return t[e]},n="(?:"+y.keys(t).join("|")+")",r=RegExp(n),i=RegExp(n,"g");return function(t){return t=null==t?"":""+t,r.test(t)?t.replace(i,e):t}};y.escape=$(I),y.unescape=$(N),y.result=function(t,e,n){var r=null==t?void 0:t[e];return void 0===r&&(r=n),y.isFunction(r)?r.call(t):r};var L=0;y.uniqueId=function(t){var e=++L+"";return t?t+e:e},y.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var Y=/(.)^/,H={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},B=/\\|'|\r|\n|\u2028|\u2029/g,F=function(t){return"\\"+H[t]};y.template=function(t,e,n){!e&&n&&(e=n),e=y.defaults({},e,y.templateSettings);var r=RegExp([(e.escape||Y).source,(e.interpolate||Y).source,(e.evaluate||Y).source].join("|")+"|$","g"),i=0,s="__p+='";t.replace(r,function(e,n,r,a,o){return s+=t.slice(i,o).replace(B,F),i=o+e.length,n?s+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":r?s+="'+\n((__t=("+r+"))==null?'':__t)+\n'":a&&(s+="';\n"+a+"\n__p+='"),e}),s+="';\n",e.variable||(s="with(obj||{}){\n"+s+"}\n"),s="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+s+"return __p;\n";try{var a=new Function(e.variable||"obj","_",s)}catch(o){throw o.source=s,o}var u=function(t){return a.call(this,t,y)},c=e.variable||"obj";return u.source="function("+c+"){\n"+s+"}",u},y.chain=function(t){var e=y(t);return e._chain=!0,e};var j=function(t,e){return t._chain?y(e).chain():e};y.mixin=function(t){y.each(y.functions(t),function(e){var n=y[e]=t[e];y.prototype[e]=function(){var t=[this._wrapped];return c.apply(t,arguments),j(this,n.apply(y,t))}})},y.mixin(y),y.each(["pop","push","reverse","shift","sort","splice","unshift"],function(t){var e=a[t];y.prototype[t]=function(){var n=this._wrapped;return e.apply(n,arguments),"shift"!==t&&"splice"!==t||0!==n.length||delete n[0],j(this,n)}}),y.each(["concat","join","slice"],function(t){var e=a[t];y.prototype[t]=function(){return j(this,e.apply(this._wrapped,arguments))}}),y.prototype.value=function(){return this._wrapped},y.prototype.valueOf=y.prototype.toJSON=y.prototype.value,y.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return y})}).call(this),function(t){var e="object"==typeof self&&self.self==self&&self||"object"==typeof global&&global.global==global&&global;if("function"==typeof define&&define.amd)define(["underscore","jquery","exports"],function(n,r,i){e.Backbone=t(e,i,n,r)});else if("undefined"!=typeof exports){var n,r=require("underscore");try{n=require("jquery")}catch(i){}t(e,exports,r,n)}else e.Backbone=t(e,{},e._,e.jQuery||e.Zepto||e.ender||e.$)}(function(t,e,n,r){var i=t.Backbone,s=Array.prototype.slice;e.VERSION="1.2.3",e.$=r,e.noConflict=function(){return t.Backbone=i,this},e.emulateHTTP=!1,e.emulateJSON=!1;var a=function(t,e,r){switch(t){case 1:return function(){return n[e](this[r])};case 2:return function(t){return n[e](this[r],t)};case 3:return function(t,i){return n[e](this[r],u(t,this),i)};case 4:return function(t,i,s){return n[e](this[r],u(t,this),i,s)};default:return function(){var t=s.call(arguments);return t.unshift(this[r]),n[e].apply(n,t)}}},o=function(t,e,r){n.each(e,function(e,i){n[i]&&(t.prototype[i]=a(e,i,r))})},u=function(t,e){return n.isFunction(t)?t:n.isObject(t)&&!e._isModel(t)?c(t):n.isString(t)?function(e){return e.get(t)}:t},c=function(t){var e=n.matches(t);return function(t){return e(t.attributes)}},l=e.Events={},h=/\s+/,p=function(t,e,r,i,s){var a,o=0;if(r&&"object"==typeof r){void 0!==i&&"context"in s&&void 0===s.context&&(s.context=i);for(a=n.keys(r);o<a.length;o++)e=p(t,e,a[o],r[a[o]],s)}else if(r&&h.test(r))for(a=r.split(h);o<a.length;o++)e=t(e,a[o],i,s);else e=t(e,r,i,s);return e};l.on=function(t,e,n){return f(this,t,e,n)};var f=function(t,e,n,r,i){if(t._events=p(d,t._events||{},e,n,{context:r,ctx:t,listening:i}),i){var s=t._listeners||(t._listeners={});s[i.id]=i}return t};l.listenTo=function(t,e,r){if(!t)return this;var i=t._listenId||(t._listenId=n.uniqueId("l")),s=this._listeningTo||(this._listeningTo={}),a=s[i];if(!a){var o=this._listenId||(this._listenId=n.uniqueId("l"));a=s[i]={obj:t,objId:i,id:o,listeningTo:s,count:0}}return f(t,e,r,this,a),this};var d=function(t,e,n,r){if(n){var i=t[e]||(t[e]=[]),s=r.context,a=r.ctx,o=r.listening;o&&o.count++,i.push({callback:n,context:s,ctx:s||a,listening:o})}return t};l.off=function(t,e,n){return this._events?(this._events=p(m,this._events,t,e,{context:n,listeners:this._listeners}),this):this},l.stopListening=function(t,e,r){var i=this._listeningTo;if(!i)return this;for(var s=t?[t._listenId]:n.keys(i),a=0;a<s.length;a++){var o=i[s[a]];if(!o)break;o.obj.off(e,r,this)}return n.isEmpty(i)&&(this._listeningTo=void 0),this};var m=function(t,e,r,i){if(t){var s,a=0,o=i.context,u=i.listeners;if(e||r||o){for(var c=e?[e]:n.keys(t);a<c.length;a++){e=c[a];var l=t[e];if(!l)break;for(var h=[],p=0;p<l.length;p++){var f=l[p];r&&r!==f.callback&&r!==f.callback._callback||o&&o!==f.context?h.push(f):(s=f.listening,s&&0===--s.count&&(delete u[s.id],delete s.listeningTo[s.objId]))}h.length?t[e]=h:delete t[e]}return n.size(t)?t:void 0}for(var d=n.keys(u);a<d.length;a++)s=u[d[a]],delete u[s.id],delete s.listeningTo[s.objId]}};l.once=function(t,e,r){var i=p(g,{},t,e,n.bind(this.off,this));return this.on(i,void 0,r)},l.listenToOnce=function(t,e,r){var i=p(g,{},e,r,n.bind(this.stopListening,this,t));return this.listenTo(t,i)};var g=function(t,e,r,i){if(r){var s=t[e]=n.once(function(){i(e,s),r.apply(this,arguments)});s._callback=r}return t};l.trigger=function(t){if(!this._events)return this;for(var e=Math.max(0,arguments.length-1),n=Array(e),r=0;e>r;r++)n[r]=arguments[r+1];return p(v,this._events,t,void 0,n),this};var v=function(t,e,n,r){if(t){var i=t[e],s=t.all;i&&s&&(s=s.slice()),i&&y(i,r),s&&y(s,[e].concat(r))}return t},y=function(t,e){var n,r=-1,i=t.length,s=e[0],a=e[1],o=e[2];switch(e.length){case 0:for(;++r<i;)(n=t[r]).callback.call(n.ctx);return;case 1:for(;++r<i;)(n=t[r]).callback.call(n.ctx,s);return;case 2:for(;++r<i;)(n=t[r]).callback.call(n.ctx,s,a);return;case 3:for(;++r<i;)(n=t[r]).callback.call(n.ctx,s,a,o);return;default:for(;++r<i;)(n=t[r]).callback.apply(n.ctx,e);return}};l.bind=l.on,l.unbind=l.off,n.extend(e,l);var _=e.Model=function(t,e){var r=t||{};e||(e={}),this.cid=n.uniqueId(this.cidPrefix),this.attributes={},e.collection&&(this.collection=e.collection),e.parse&&(r=this.parse(r,e)||{}),r=n.defaults({},r,n.result(this,"defaults")),this.set(r,e),this.changed={},this.initialize.apply(this,arguments)};n.extend(_.prototype,l,{changed:null,validationError:null,idAttribute:"id",cidPrefix:"c",initialize:function(){},toJSON:function(t){return n.clone(this.attributes)},sync:function(){return e.sync.apply(this,arguments)},get:function(t){return this.attributes[t]},escape:function(t){return n.escape(this.get(t))},has:function(t){return null!=this.get(t)},matches:function(t){return!!n.iteratee(t,this)(this.attributes)},set:function(t,e,r){if(null==t)return this;var i;if("object"==typeof t?(i=t,r=e):(i={})[t]=e,r||(r={}),!this._validate(i,r))return!1;var s=r.unset,a=r.silent,o=[],u=this._changing;this._changing=!0,u||(this._previousAttributes=n.clone(this.attributes),this.changed={});var c=this.attributes,l=this.changed,h=this._previousAttributes;for(var p in i)e=i[p],n.isEqual(c[p],e)||o.push(p),n.isEqual(h[p],e)?delete l[p]:l[p]=e,s?delete c[p]:c[p]=e;if(this.id=this.get(this.idAttribute),!a){o.length&&(this._pending=r);for(var f=0;f<o.length;f++)this.trigger("change:"+o[f],this,c[o[f]],r)}if(u)return this;if(!a)for(;this._pending;)r=this._pending,this._pending=!1,this.trigger("change",this,r);return this._pending=!1,this._changing=!1,this},unset:function(t,e){return this.set(t,void 0,n.extend({},e,{unset:!0}))},clear:function(t){var e={};for(var r in this.attributes)e[r]=void 0;return this.set(e,n.extend({},t,{unset:!0}))},hasChanged:function(t){return null==t?!n.isEmpty(this.changed):n.has(this.changed,t)},changedAttributes:function(t){if(!t)return this.hasChanged()?n.clone(this.changed):!1;var e=this._changing?this._previousAttributes:this.attributes,r={};for(var i in t){var s=t[i];n.isEqual(e[i],s)||(r[i]=s)}return n.size(r)?r:!1},previous:function(t){return null!=t&&this._previousAttributes?this._previousAttributes[t]:null},previousAttributes:function(){return n.clone(this._previousAttributes)},fetch:function(t){t=n.extend({parse:!0},t);var e=this,r=t.success;return t.success=function(n){var i=t.parse?e.parse(n,t):n;return e.set(i,t)?(r&&r.call(t.context,e,n,t),void e.trigger("sync",e,n,t)):!1},j(this,t),this.sync("read",this,t)},save:function(t,e,r){var i;null==t||"object"==typeof t?(i=t,r=e):(i={})[t]=e,r=n.extend({validate:!0,parse:!0},r);var s=r.wait;if(i&&!s){if(!this.set(i,r))return!1}else if(!this._validate(i,r))return!1;var a=this,o=r.success,u=this.attributes;r.success=function(t){a.attributes=u;var e=r.parse?a.parse(t,r):t;return s&&(e=n.extend({},i,e)),e&&!a.set(e,r)?!1:(o&&o.call(r.context,a,t,r),void a.trigger("sync",a,t,r))},j(this,r),i&&s&&(this.attributes=n.extend({},u,i));var c=this.isNew()?"create":r.patch?"patch":"update";"patch"!==c||r.attrs||(r.attrs=i);var l=this.sync(c,this,r);return this.attributes=u,l},destroy:function(t){t=t?n.clone(t):{};var e=this,r=t.success,i=t.wait,s=function(){e.stopListening(),e.trigger("destroy",e,e.collection,t)};t.success=function(n){i&&s(),r&&r.call(t.context,e,n,t),e.isNew()||e.trigger("sync",e,n,t)};var a=!1;return this.isNew()?n.defer(t.success):(j(this,t),a=this.sync("delete",this,t)),i||s(),a},url:function(){var t=n.result(this,"urlRoot")||n.result(this.collection,"url")||F();if(this.isNew())return t;var e=this.get(this.idAttribute);return t.replace(/[^\/]$/,"$&/")+encodeURIComponent(e)},parse:function(t,e){return t},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return!this.has(this.idAttribute)},isValid:function(t){return this._validate({},n.defaults({validate:!0},t))},_validate:function(t,e){if(!e.validate||!this.validate)return!0;t=n.extend({},this.attributes,t);var r=this.validationError=this.validate(t,e)||null;return r?(this.trigger("invalid",this,r,n.extend(e,{validationError:r})),!1):!0}});var k={keys:1,values:1,pairs:1,invert:1,pick:0,omit:0,chain:1,isEmpty:1};o(_,k,"attributes");var b=e.Collection=function(t,e){e||(e={}),e.model&&(this.model=e.model),void 0!==e.comparator&&(this.comparator=e.comparator),this._reset(),this.initialize.apply(this,arguments),t&&this.reset(t,n.extend({silent:!0},e))},S={add:!0,remove:!0,merge:!0},w={add:!0,remove:!1},x=function(t,e,n){n=Math.min(Math.max(n,0),t.length);for(var r=Array(t.length-n),i=e.length,s=0;s<r.length;s++)r[s]=t[s+n];for(s=0;i>s;s++)t[s+n]=e[s];for(s=0;s<r.length;s++)t[s+i+n]=r[s]};n.extend(b.prototype,l,{model:_,initialize:function(){},toJSON:function(t){return this.map(function(e){return e.toJSON(t)})},sync:function(){return e.sync.apply(this,arguments)},add:function(t,e){return this.set(t,n.extend({merge:!1},e,w))},remove:function(t,e){e=n.extend({},e);var r=!n.isArray(t);t=r?[t]:n.clone(t);var i=this._removeModels(t,e);return!e.silent&&i&&this.trigger("update",this,e),r?i[0]:i},set:function(t,e){if(null!=t){e=n.defaults({},e,S),e.parse&&!this._isModel(t)&&(t=this.parse(t,e));var r=!n.isArray(t);t=r?[t]:t.slice();var i=e.at;null!=i&&(i=+i),0>i&&(i+=this.length+1);for(var s,a=[],o=[],u=[],c={},l=e.add,h=e.merge,p=e.remove,f=!1,d=this.comparator&&null==i&&e.sort!==!1,m=n.isString(this.comparator)?this.comparator:null,g=0;g<t.length;g++){s=t[g];var v=this.get(s);if(v){if(h&&s!==v){var y=this._isModel(s)?s.attributes:s;e.parse&&(y=v.parse(y,e)),v.set(y,e),d&&!f&&(f=v.hasChanged(m))}c[v.cid]||(c[v.cid]=!0,a.push(v)),t[g]=v}else l&&(s=t[g]=this._prepareModel(s,e),s&&(o.push(s),this._addReference(s,e),c[s.cid]=!0,a.push(s)))}if(p){for(g=0;g<this.length;g++)s=this.models[g],c[s.cid]||u.push(s);u.length&&this._removeModels(u,e)}var _=!1,k=!d&&l&&p;if(a.length&&k?(_=this.length!=a.length||n.some(this.models,function(t,e){return t!==a[e]}),this.models.length=0,x(this.models,a,0),this.length=this.models.length):o.length&&(d&&(f=!0),x(this.models,o,null==i?this.length:i),this.length=this.models.length),f&&this.sort({silent:!0}),!e.silent){for(g=0;g<o.length;g++)null!=i&&(e.index=i+g),s=o[g],s.trigger("add",s,this,e);(f||_)&&this.trigger("sort",this,e),(o.length||u.length)&&this.trigger("update",this,e)}return r?t[0]:t}},reset:function(t,e){e=e?n.clone(e):{};for(var r=0;r<this.models.length;r++)this._removeReference(this.models[r],e);return e.previousModels=this.models,this._reset(),t=this.add(t,n.extend({silent:!0},e)),e.silent||this.trigger("reset",this,e),t},push:function(t,e){return this.add(t,n.extend({at:this.length},e))},pop:function(t){var e=this.at(this.length-1);return this.remove(e,t)},unshift:function(t,e){return this.add(t,n.extend({at:0},e))},shift:function(t){var e=this.at(0);return this.remove(e,t)},slice:function(){return s.apply(this.models,arguments)},get:function(t){if(null!=t){var e=this.modelId(this._isModel(t)?t.attributes:t);return this._byId[t]||this._byId[e]||this._byId[t.cid]}},at:function(t){return 0>t&&(t+=this.length),this.models[t]},where:function(t,e){return this[e?"find":"filter"](t)},findWhere:function(t){return this.where(t,!0)},sort:function(t){var e=this.comparator;if(!e)throw new Error("Cannot sort a set without a comparator");t||(t={});var r=e.length;return n.isFunction(e)&&(e=n.bind(e,this)),1===r||n.isString(e)?this.models=this.sortBy(e):this.models.sort(e),t.silent||this.trigger("sort",this,t),this},pluck:function(t){return n.invoke(this.models,"get",t)},fetch:function(t){t=n.extend({parse:!0},t);var e=t.success,r=this;return t.success=function(n){var i=t.reset?"reset":"set";r[i](n,t),e&&e.call(t.context,r,n,t),r.trigger("sync",r,n,t)},j(this,t),this.sync("read",this,t)},create:function(t,e){e=e?n.clone(e):{};var r=e.wait;if(t=this._prepareModel(t,e),!t)return!1;r||this.add(t,e);var i=this,s=e.success;return e.success=function(t,e,n){r&&i.add(t,n),s&&s.call(n.context,t,e,n)},t.save(null,e),t},parse:function(t,e){return t},clone:function(){return new this.constructor(this.models,{model:this.model,comparator:this.comparator})},modelId:function(t){return t[this.model.prototype.idAttribute||"id"]},_reset:function(){this.length=0,this.models=[],this._byId={}},_prepareModel:function(t,e){if(this._isModel(t))return t.collection||(t.collection=this),t;e=e?n.clone(e):{},e.collection=this;var r=new this.model(t,e);return r.validationError?(this.trigger("invalid",this,r.validationError,e),!1):r},_removeModels:function(t,e){for(var n=[],r=0;r<t.length;r++){var i=this.get(t[r]);if(i){var s=this.indexOf(i);this.models.splice(s,1),this.length--,e.silent||(e.index=s,i.trigger("remove",i,this,e)),n.push(i),this._removeReference(i,e)}}return n.length?n:!1},_isModel:function(t){return t instanceof _},_addReference:function(t,e){this._byId[t.cid]=t;var n=this.modelId(t.attributes);null!=n&&(this._byId[n]=t),t.on("all",this._onModelEvent,this)},_removeReference:function(t,e){delete this._byId[t.cid];var n=this.modelId(t.attributes);null!=n&&delete this._byId[n],this===t.collection&&delete t.collection,t.off("all",this._onModelEvent,this)},_onModelEvent:function(t,e,n,r){if("add"!==t&&"remove"!==t||n===this){if("destroy"===t&&this.remove(e,r),"change"===t){var i=this.modelId(e.previousAttributes()),s=this.modelId(e.attributes);i!==s&&(null!=i&&delete this._byId[i],null!=s&&(this._byId[s]=e))}this.trigger.apply(this,arguments)}}});var P={forEach:3,each:3,map:3,collect:3,reduce:4,foldl:4,inject:4,reduceRight:4,foldr:4,find:3,detect:3,filter:3,select:3,reject:3,every:3,all:3,some:3,any:3,include:3,includes:3,contains:3,invoke:0,max:3,min:3,toArray:1,size:1,first:3,head:3,take:3,initial:3,rest:3,tail:3,drop:3,last:3,without:0,difference:0,indexOf:3,shuffle:1,lastIndexOf:3,isEmpty:1,chain:1,sample:3,partition:3,groupBy:3,countBy:3,sortBy:3,indexBy:3};o(b,P,"models");var M=e.View=function(t){this.cid=n.uniqueId("view"),n.extend(this,n.pick(t,E)),this._ensureElement(),this.initialize.apply(this,arguments)},D=/^(\S+)\s*(.*)$/,E=["model","collection","el","id","attributes","className","tagName","events"];n.extend(M.prototype,l,{tagName:"div",$:function(t){return this.$el.find(t)},initialize:function(){},render:function(){return this},remove:function(){return this._removeElement(),this.stopListening(),this},_removeElement:function(){this.$el.remove()},setElement:function(t){return this.undelegateEvents(),this._setElement(t),this.delegateEvents(),this},_setElement:function(t){this.$el=t instanceof e.$?t:e.$(t),this.el=this.$el[0]},delegateEvents:function(t){if(t||(t=n.result(this,"events")),!t)return this;this.undelegateEvents();for(var e in t){var r=t[e];if(n.isFunction(r)||(r=this[r]),r){var i=e.match(D);this.delegate(i[1],i[2],n.bind(r,this))}}return this},delegate:function(t,e,n){return this.$el.on(t+".delegateEvents"+this.cid,e,n),this},undelegateEvents:function(){return this.$el&&this.$el.off(".delegateEvents"+this.cid),this},undelegate:function(t,e,n){return this.$el.off(t+".delegateEvents"+this.cid,e,n),this},_createElement:function(t){return document.createElement(t)},_ensureElement:function(){if(this.el)this.setElement(n.result(this,"el"));else{var t=n.extend({},n.result(this,"attributes"));this.id&&(t.id=n.result(this,"id")),this.className&&(t["class"]=n.result(this,"className")),this.setElement(this._createElement(n.result(this,"tagName"))),this._setAttributes(t)}},_setAttributes:function(t){this.$el.attr(t)}}),e.sync=function(t,r,i){var s=C[t];n.defaults(i||(i={}),{emulateHTTP:e.emulateHTTP,emulateJSON:e.emulateJSON});var a={type:s,dataType:"json"};if(i.url||(a.url=n.result(r,"url")||F()),null!=i.data||!r||"create"!==t&&"update"!==t&&"patch"!==t||(a.contentType="application/json",a.data=JSON.stringify(i.attrs||r.toJSON(i))),i.emulateJSON&&(a.contentType="application/x-www-form-urlencoded",a.data=a.data?{model:a.data}:{}),i.emulateHTTP&&("PUT"===s||"DELETE"===s||"PATCH"===s)){a.type="POST",i.emulateJSON&&(a.data._method=s);
var o=i.beforeSend;i.beforeSend=function(t){return t.setRequestHeader("X-HTTP-Method-Override",s),o?o.apply(this,arguments):void 0}}"GET"===a.type||i.emulateJSON||(a.processData=!1);var u=i.error;i.error=function(t,e,n){i.textStatus=e,i.errorThrown=n,u&&u.call(i.context,t,e,n)};var c=i.xhr=e.ajax(n.extend(a,i));return r.trigger("request",r,c,i),c};var C={create:"POST",update:"PUT",patch:"PATCH","delete":"DELETE",read:"GET"};e.ajax=function(){return e.$.ajax.apply(e.$,arguments)};var O=e.Router=function(t){t||(t={}),t.routes&&(this.routes=t.routes),this._bindRoutes(),this.initialize.apply(this,arguments)},A=/\((.*?)\)/g,T=/(\(\?)?:\w+/g,I=/\*\w+/g,N=/[\-{}\[\]+?.,\\\^$|#\s]/g;n.extend(O.prototype,l,{initialize:function(){},route:function(t,r,i){n.isRegExp(t)||(t=this._routeToRegExp(t)),n.isFunction(r)&&(i=r,r=""),i||(i=this[r]);var s=this;return e.history.route(t,function(n){var a=s._extractParameters(t,n);s.execute(i,a,r)!==!1&&(s.trigger.apply(s,["route:"+r].concat(a)),s.trigger("route",r,a),e.history.trigger("route",s,r,a))}),this},execute:function(t,e,n){t&&t.apply(this,e)},navigate:function(t,n){return e.history.navigate(t,n),this},_bindRoutes:function(){if(this.routes){this.routes=n.result(this,"routes");for(var t,e=n.keys(this.routes);null!=(t=e.pop());)this.route(t,this.routes[t])}},_routeToRegExp:function(t){return t=t.replace(N,"\\$&").replace(A,"(?:$1)?").replace(T,function(t,e){return e?t:"([^/?]+)"}).replace(I,"([^?]*?)"),new RegExp("^"+t+"(?:\\?([\\s\\S]*))?$")},_extractParameters:function(t,e){var r=t.exec(e).slice(1);return n.map(r,function(t,e){return e===r.length-1?t||null:t?decodeURIComponent(t):null})}});var $=e.History=function(){this.handlers=[],this.checkUrl=n.bind(this.checkUrl,this),"undefined"!=typeof window&&(this.location=window.location,this.history=window.history)},L=/^[#\/]|\s+$/g,Y=/^\/+|\/+$/g,H=/#.*$/;$.started=!1,n.extend($.prototype,l,{interval:50,atRoot:function(){var t=this.location.pathname.replace(/[^\/]$/,"$&/");return t===this.root&&!this.getSearch()},matchRoot:function(){var t=this.decodeFragment(this.location.pathname),e=t.slice(0,this.root.length-1)+"/";return e===this.root},decodeFragment:function(t){return decodeURI(t.replace(/%25/g,"%2525"))},getSearch:function(){var t=this.location.href.replace(/#.*/,"").match(/\?.+/);return t?t[0]:""},getHash:function(t){var e=(t||this).location.href.match(/#(.*)$/);return e?e[1]:""},getPath:function(){var t=this.decodeFragment(this.location.pathname+this.getSearch()).slice(this.root.length-1);return"/"===t.charAt(0)?t.slice(1):t},getFragment:function(t){return null==t&&(t=this._usePushState||!this._wantsHashChange?this.getPath():this.getHash()),t.replace(L,"")},start:function(t){if($.started)throw new Error("Backbone.history has already been started");if($.started=!0,this.options=n.extend({root:"/"},this.options,t),this.root=this.options.root,this._wantsHashChange=this.options.hashChange!==!1,this._hasHashChange="onhashchange"in window&&(void 0===document.documentMode||document.documentMode>7),this._useHashChange=this._wantsHashChange&&this._hasHashChange,this._wantsPushState=!!this.options.pushState,this._hasPushState=!(!this.history||!this.history.pushState),this._usePushState=this._wantsPushState&&this._hasPushState,this.fragment=this.getFragment(),this.root=("/"+this.root+"/").replace(Y,"/"),this._wantsHashChange&&this._wantsPushState){if(!this._hasPushState&&!this.atRoot()){var e=this.root.slice(0,-1)||"/";return this.location.replace(e+"#"+this.getPath()),!0}this._hasPushState&&this.atRoot()&&this.navigate(this.getHash(),{replace:!0})}if(!this._hasHashChange&&this._wantsHashChange&&!this._usePushState){this.iframe=document.createElement("iframe"),this.iframe.src="javascript:0",this.iframe.style.display="none",this.iframe.tabIndex=-1;var r=document.body,i=r.insertBefore(this.iframe,r.firstChild).contentWindow;i.document.open(),i.document.close(),i.location.hash="#"+this.fragment}var s=window.addEventListener||function(t,e){return attachEvent("on"+t,e)};return this._usePushState?s("popstate",this.checkUrl,!1):this._useHashChange&&!this.iframe?s("hashchange",this.checkUrl,!1):this._wantsHashChange&&(this._checkUrlInterval=setInterval(this.checkUrl,this.interval)),this.options.silent?void 0:this.loadUrl()},stop:function(){var t=window.removeEventListener||function(t,e){return detachEvent("on"+t,e)};this._usePushState?t("popstate",this.checkUrl,!1):this._useHashChange&&!this.iframe&&t("hashchange",this.checkUrl,!1),this.iframe&&(document.body.removeChild(this.iframe),this.iframe=null),this._checkUrlInterval&&clearInterval(this._checkUrlInterval),$.started=!1},route:function(t,e){this.handlers.unshift({route:t,callback:e})},checkUrl:function(t){var e=this.getFragment();return e===this.fragment&&this.iframe&&(e=this.getHash(this.iframe.contentWindow)),e===this.fragment?!1:(this.iframe&&this.navigate(e),void this.loadUrl())},loadUrl:function(t){return this.matchRoot()?(t=this.fragment=this.getFragment(t),n.some(this.handlers,function(e){return e.route.test(t)?(e.callback(t),!0):void 0})):!1},navigate:function(t,e){if(!$.started)return!1;e&&e!==!0||(e={trigger:!!e}),t=this.getFragment(t||"");var n=this.root;(""===t||"?"===t.charAt(0))&&(n=n.slice(0,-1)||"/");var r=n+t;if(t=this.decodeFragment(t.replace(H,"")),this.fragment!==t){if(this.fragment=t,this._usePushState)this.history[e.replace?"replaceState":"pushState"]({},document.title,r);else{if(!this._wantsHashChange)return this.location.assign(r);if(this._updateHash(this.location,t,e.replace),this.iframe&&t!==this.getHash(this.iframe.contentWindow)){var i=this.iframe.contentWindow;e.replace||(i.document.open(),i.document.close()),this._updateHash(i.location,t,e.replace)}}return e.trigger?this.loadUrl(t):void 0}},_updateHash:function(t,e,n){if(n){var r=t.href.replace(/(javascript:|#).*$/,"");t.replace(r+"#"+e)}else t.hash="#"+e}}),e.history=new $;var B=function(t,e){var r,i=this;r=t&&n.has(t,"constructor")?t.constructor:function(){return i.apply(this,arguments)},n.extend(r,i,e);var s=function(){this.constructor=r};return s.prototype=i.prototype,r.prototype=new s,t&&n.extend(r.prototype,t),r.__super__=i.prototype,r};_.extend=b.extend=O.extend=M.extend=$.extend=B;var F=function(){throw new Error('A "url" property or function must be specified')},j=function(t,e){var n=e.error;e.error=function(r){n&&n.call(e.context,t,r,e),t.trigger("error",t,r,e)}};return e}),function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.Handlebars=e():t.Handlebars=e()}(this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var i=n[r]={exports:{},id:r,loaded:!1};return t[r].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";function r(){var t=v();return t.compile=function(e,n){return l.compile(e,n,t)},t.precompile=function(e,n){return l.precompile(e,n,t)},t.AST=u["default"],t.Compiler=l.Compiler,t.JavaScriptCompiler=p["default"],t.Parser=c.parser,t.parse=c.parse,t}var i=n(1)["default"];e.__esModule=!0;var s=n(2),a=i(s),o=n(21),u=i(o),c=n(22),l=n(27),h=n(28),p=i(h),f=n(25),d=i(f),m=n(20),g=i(m),v=a["default"].create,y=r();y.create=r,g["default"](y),y.Visitor=d["default"],y["default"]=y,e["default"]=y,t.exports=e["default"]},function(t,e){"use strict";e["default"]=function(t){return t&&t.__esModule?t:{"default":t}},e.__esModule=!0},function(t,e,n){"use strict";function r(){var t=new o.HandlebarsEnvironment;return f.extend(t,o),t.SafeString=c["default"],t.Exception=h["default"],t.Utils=f,t.escapeExpression=f.escapeExpression,t.VM=m,t.template=function(e){return m.template(e,t)},t}var i=n(3)["default"],s=n(1)["default"];e.__esModule=!0;var a=n(4),o=i(a),u=n(18),c=s(u),l=n(6),h=s(l),p=n(5),f=i(p),d=n(19),m=i(d),g=n(20),v=s(g),y=r();y.create=r,v["default"](y),y["default"]=y,e["default"]=y,t.exports=e["default"]},function(t,e){"use strict";e["default"]=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e},e.__esModule=!0},function(t,e,n){"use strict";function r(t,e,n){this.helpers=t||{},this.partials=e||{},this.decorators=n||{},u.registerDefaultHelpers(this),c.registerDefaultDecorators(this)}var i=n(1)["default"];e.__esModule=!0,e.HandlebarsEnvironment=r;var s=n(5),a=n(6),o=i(a),u=n(7),c=n(15),l=n(17),h=i(l),p="4.0.5";e.VERSION=p;var f=7;e.COMPILER_REVISION=f;var d={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0"};e.REVISION_CHANGES=d;var m="[object Object]";r.prototype={constructor:r,logger:h["default"],log:h["default"].log,registerHelper:function(t,e){if(s.toString.call(t)===m){if(e)throw new o["default"]("Arg not supported with multiple helpers");s.extend(this.helpers,t)}else this.helpers[t]=e},unregisterHelper:function(t){delete this.helpers[t]},registerPartial:function(t,e){if(s.toString.call(t)===m)s.extend(this.partials,t);else{if("undefined"==typeof e)throw new o["default"]('Attempting to register a partial called "'+t+'" as undefined');this.partials[t]=e}},unregisterPartial:function(t){delete this.partials[t]},registerDecorator:function(t,e){if(s.toString.call(t)===m){if(e)throw new o["default"]("Arg not supported with multiple decorators");s.extend(this.decorators,t)}else this.decorators[t]=e},unregisterDecorator:function(t){delete this.decorators[t]}};var g=h["default"].log;e.log=g,e.createFrame=s.createFrame,e.logger=h["default"]},function(t,e){"use strict";function n(t){return l[t]}function r(t){for(var e=1;e<arguments.length;e++)for(var n in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],n)&&(t[n]=arguments[e][n]);return t}function i(t,e){for(var n=0,r=t.length;r>n;n++)if(t[n]===e)return n;return-1}function s(t){if("string"!=typeof t){if(t&&t.toHTML)return t.toHTML();if(null==t)return"";if(!t)return t+"";t=""+t}return p.test(t)?t.replace(h,n):t}function a(t){return t||0===t?m(t)&&0===t.length?!0:!1:!0}function o(t){var e=r({},t);return e._parent=t,e}function u(t,e){return t.path=e,t}function c(t,e){return(t?t+".":"")+e}e.__esModule=!0,e.extend=r,e.indexOf=i,e.escapeExpression=s,e.isEmpty=a,e.createFrame=o,e.blockParams=u,e.appendContextPath=c;var l={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},h=/[&<>"'`=]/g,p=/[&<>"'`=]/,f=Object.prototype.toString;e.toString=f;var d=function(t){return"function"==typeof t};d(/x/)&&(e.isFunction=d=function(t){return"function"==typeof t&&"[object Function]"===f.call(t)}),e.isFunction=d;var m=Array.isArray||function(t){return t&&"object"==typeof t?"[object Array]"===f.call(t):!1};e.isArray=m},function(t,e){"use strict";function n(t,e){var i=e&&e.loc,s=void 0,a=void 0;i&&(s=i.start.line,a=i.start.column,t+=" - "+s+":"+a);for(var o=Error.prototype.constructor.call(this,t),u=0;u<r.length;u++)this[r[u]]=o[r[u]];Error.captureStackTrace&&Error.captureStackTrace(this,n),i&&(this.lineNumber=s,this.column=a)}e.__esModule=!0;var r=["description","fileName","lineNumber","message","name","number","stack"];n.prototype=new Error,e["default"]=n,t.exports=e["default"]},function(t,e,n){"use strict";function r(t){a["default"](t),u["default"](t),l["default"](t),p["default"](t),d["default"](t),g["default"](t),y["default"](t)}var i=n(1)["default"];e.__esModule=!0,e.registerDefaultHelpers=r;var s=n(8),a=i(s),o=n(9),u=i(o),c=n(10),l=i(c),h=n(11),p=i(h),f=n(12),d=i(f),m=n(13),g=i(m),v=n(14),y=i(v)},function(t,e,n){"use strict";e.__esModule=!0;var r=n(5);e["default"]=function(t){t.registerHelper("blockHelperMissing",function(e,n){var i=n.inverse,s=n.fn;if(e===!0)return s(this);if(e===!1||null==e)return i(this);if(r.isArray(e))return e.length>0?(n.ids&&(n.ids=[n.name]),t.helpers.each(e,n)):i(this);if(n.data&&n.ids){var a=r.createFrame(n.data);a.contextPath=r.appendContextPath(n.data.contextPath,n.name),n={data:a}}return s(e,n)})},t.exports=e["default"]},function(t,e,n){"use strict";var r=n(1)["default"];e.__esModule=!0;var i=n(5),s=n(6),a=r(s);e["default"]=function(t){t.registerHelper("each",function(t,e){function n(e,n,s){c&&(c.key=e,c.index=n,c.first=0===n,c.last=!!s,l&&(c.contextPath=l+e)),u+=r(t[e],{data:c,blockParams:i.blockParams([t[e],e],[l+e,null])})}if(!e)throw new a["default"]("Must pass iterator to #each");var r=e.fn,s=e.inverse,o=0,u="",c=void 0,l=void 0;if(e.data&&e.ids&&(l=i.appendContextPath(e.data.contextPath,e.ids[0])+"."),i.isFunction(t)&&(t=t.call(this)),e.data&&(c=i.createFrame(e.data)),t&&"object"==typeof t)if(i.isArray(t))for(var h=t.length;h>o;o++)o in t&&n(o,o,o===t.length-1);else{var p=void 0;for(var f in t)t.hasOwnProperty(f)&&(void 0!==p&&n(p,o-1),p=f,o++);void 0!==p&&n(p,o-1,!0)}return 0===o&&(u=s(this)),u})},t.exports=e["default"]},function(t,e,n){"use strict";var r=n(1)["default"];e.__esModule=!0;var i=n(6),s=r(i);e["default"]=function(t){t.registerHelper("helperMissing",function(){if(1!==arguments.length)throw new s["default"]('Missing helper: "'+arguments[arguments.length-1].name+'"')})},t.exports=e["default"]},function(t,e,n){"use strict";e.__esModule=!0;var r=n(5);e["default"]=function(t){t.registerHelper("if",function(t,e){return r.isFunction(t)&&(t=t.call(this)),!e.hash.includeZero&&!t||r.isEmpty(t)?e.inverse(this):e.fn(this)}),t.registerHelper("unless",function(e,n){return t.helpers["if"].call(this,e,{fn:n.inverse,inverse:n.fn,hash:n.hash})})},t.exports=e["default"]},function(t,e){"use strict";e.__esModule=!0,e["default"]=function(t){t.registerHelper("log",function(){for(var e=[void 0],n=arguments[arguments.length-1],r=0;r<arguments.length-1;r++)e.push(arguments[r]);var i=1;null!=n.hash.level?i=n.hash.level:n.data&&null!=n.data.level&&(i=n.data.level),e[0]=i,t.log.apply(t,e)})},t.exports=e["default"]},function(t,e){"use strict";e.__esModule=!0,e["default"]=function(t){t.registerHelper("lookup",function(t,e){return t&&t[e]})},t.exports=e["default"]},function(t,e,n){"use strict";e.__esModule=!0;var r=n(5);e["default"]=function(t){t.registerHelper("with",function(t,e){r.isFunction(t)&&(t=t.call(this));var n=e.fn;if(r.isEmpty(t))return e.inverse(this);var i=e.data;return e.data&&e.ids&&(i=r.createFrame(e.data),i.contextPath=r.appendContextPath(e.data.contextPath,e.ids[0])),n(t,{data:i,blockParams:r.blockParams([t],[i&&i.contextPath])})})},t.exports=e["default"]},function(t,e,n){"use strict";function r(t){a["default"](t)}var i=n(1)["default"];e.__esModule=!0,e.registerDefaultDecorators=r;var s=n(16),a=i(s)},function(t,e,n){"use strict";e.__esModule=!0;var r=n(5);e["default"]=function(t){t.registerDecorator("inline",function(t,e,n,i){var s=t;return e.partials||(e.partials={},s=function(i,s){var a=n.partials;n.partials=r.extend({},a,e.partials);var o=t(i,s);return n.partials=a,o}),e.partials[i.args[0]]=i.fn,s})},t.exports=e["default"]},function(t,e,n){"use strict";e.__esModule=!0;var r=n(5),i={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(t){if("string"==typeof t){var e=r.indexOf(i.methodMap,t.toLowerCase());t=e>=0?e:parseInt(t,10)}return t},log:function(t){if(t=i.lookupLevel(t),"undefined"!=typeof console&&i.lookupLevel(i.level)<=t){var e=i.methodMap[t];console[e]||(e="log");for(var n=arguments.length,r=Array(n>1?n-1:0),s=1;n>s;s++)r[s-1]=arguments[s];console[e].apply(console,r)}}};e["default"]=i,t.exports=e["default"]},function(t,e){"use strict";function n(t){this.string=t}e.__esModule=!0,n.prototype.toString=n.prototype.toHTML=function(){return""+this.string},e["default"]=n,t.exports=e["default"]},function(t,e,n){"use strict";function r(t){var e=t&&t[0]||1,n=v.COMPILER_REVISION;if(e!==n){if(n>e){var r=v.REVISION_CHANGES[n],i=v.REVISION_CHANGES[e];throw new g["default"]("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+r+") or downgrade your runtime to an older version ("+i+").")}throw new g["default"]("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+t[1]+").")}}function i(t,e){function n(n,r,i){i.hash&&(r=d.extend({},r,i.hash),i.ids&&(i.ids[0]=!0)),n=e.VM.resolvePartial.call(this,n,r,i);var s=e.VM.invokePartial.call(this,n,r,i);if(null==s&&e.compile&&(i.partials[i.name]=e.compile(n,t.compilerOptions,e),s=i.partials[i.name](r,i)),null!=s){if(i.indent){for(var a=s.split("\n"),o=0,u=a.length;u>o&&(a[o]||o+1!==u);o++)a[o]=i.indent+a[o];s=a.join("\n")}return s}throw new g["default"]("The partial "+i.name+" could not be compiled when running in runtime-only mode")}function r(e){function n(e){return""+t.main(i,e,i.helpers,i.partials,a,u,o)}var s=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],a=s.data;r._setup(s),!s.partial&&t.useData&&(a=c(e,a));var o=void 0,u=t.useBlockParams?[]:void 0;return t.useDepths&&(o=s.depths?e!==s.depths[0]?[e].concat(s.depths):s.depths:[e]),(n=l(t.main,n,i,s.depths||[],a,u))(e,s)}if(!e)throw new g["default"]("No environment passed to template");if(!t||!t.main)throw new g["default"]("Unknown template object: "+typeof t);t.main.decorator=t.main_d,e.VM.checkRevision(t.compiler);var i={strict:function(t,e){if(!(e in t))throw new g["default"]('"'+e+'" not defined in '+t);return t[e]},lookup:function(t,e){for(var n=t.length,r=0;n>r;r++)if(t[r]&&null!=t[r][e])return t[r][e]},lambda:function(t,e){return"function"==typeof t?t.call(e):t},escapeExpression:d.escapeExpression,invokePartial:n,fn:function(e){var n=t[e];return n.decorator=t[e+"_d"],n},programs:[],program:function(t,e,n,r,i){var a=this.programs[t],o=this.fn(t);return e||i||r||n?a=s(this,t,o,e,n,r,i):a||(a=this.programs[t]=s(this,t,o)),a},data:function(t,e){for(;t&&e--;)t=t._parent;return t},merge:function(t,e){var n=t||e;return t&&e&&t!==e&&(n=d.extend({},e,t)),n},noop:e.VM.noop,compilerInfo:t.compiler};return r.isTop=!0,r._setup=function(n){n.partial?(i.helpers=n.helpers,i.partials=n.partials,i.decorators=n.decorators):(i.helpers=i.merge(n.helpers,e.helpers),t.usePartial&&(i.partials=i.merge(n.partials,e.partials)),(t.usePartial||t.useDecorators)&&(i.decorators=i.merge(n.decorators,e.decorators)))},r._child=function(e,n,r,a){if(t.useBlockParams&&!r)throw new g["default"]("must pass block params");if(t.useDepths&&!a)throw new g["default"]("must pass parent depths");return s(i,e,t[e],n,0,r,a)},r}function s(t,e,n,r,i,s,a){function o(e){var i=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],o=a;return a&&e!==a[0]&&(o=[e].concat(a)),n(t,e,t.helpers,t.partials,i.data||r,s&&[i.blockParams].concat(s),o)}return o=l(n,o,t,a,r,s),o.program=e,o.depth=a?a.length:0,o.blockParams=i||0,o}function a(t,e,n){return t?t.call||n.name||(n.name=t,t=n.partials[t]):t="@partial-block"===n.name?n.data["partial-block"]:n.partials[n.name],t}function o(t,e,n){n.partial=!0,n.ids&&(n.data.contextPath=n.ids[0]||n.data.contextPath);var r=void 0;if(n.fn&&n.fn!==u&&(n.data=v.createFrame(n.data),r=n.data["partial-block"]=n.fn,r.partials&&(n.partials=d.extend({},n.partials,r.partials))),void 0===t&&r&&(t=r),void 0===t)throw new g["default"]("The partial "+n.name+" could not be found");return t instanceof Function?t(e,n):void 0}function u(){return""}function c(t,e){return e&&"root"in e||(e=e?v.createFrame(e):{},e.root=t),e}function l(t,e,n,r,i,s){if(t.decorator){var a={};e=t.decorator(e,a,n,r&&r[0],i,s,r),d.extend(e,a)}return e}var h=n(3)["default"],p=n(1)["default"];e.__esModule=!0,e.checkRevision=r,e.template=i,e.wrapProgram=s,e.resolvePartial=a,e.invokePartial=o,e.noop=u;var f=n(5),d=h(f),m=n(6),g=p(m),v=n(4)},function(t,e){(function(n){"use strict";e.__esModule=!0,e["default"]=function(t){var e="undefined"!=typeof n?n:window,r=e.Handlebars;t.noConflict=function(){return e.Handlebars===t&&(e.Handlebars=r),t}},t.exports=e["default"]}).call(e,function(){return this}())},function(t,e){"use strict";e.__esModule=!0;var n={helpers:{helperExpression:function(t){return"SubExpression"===t.type||("MustacheStatement"===t.type||"BlockStatement"===t.type)&&!!(t.params&&t.params.length||t.hash)},scopedId:function(t){return/^\.|this\b/.test(t.original)},simpleId:function(t){return 1===t.parts.length&&!n.helpers.scopedId(t)&&!t.depth}}};e["default"]=n,t.exports=e["default"]},function(t,e,n){"use strict";function r(t,e){if("Program"===t.type)return t;o["default"].yy=f,f.locInfo=function(t){return new f.SourceLocation(e&&e.srcName,t)};var n=new c["default"](e);return n.accept(o["default"].parse(t))}var i=n(1)["default"],s=n(3)["default"];e.__esModule=!0,e.parse=r;var a=n(23),o=i(a),u=n(24),c=i(u),l=n(26),h=s(l),p=n(5);e.parser=o["default"];var f={};p.extend(f,h)},function(t,e){"use strict";var n=function(){function t(){this.yy={}}var e={trace:function(){},yy:{},symbols_:{error:2,root:3,program:4,EOF:5,program_repetition0:6,statement:7,mustache:8,block:9,rawBlock:10,partial:11,partialBlock:12,content:13,COMMENT:14,CONTENT:15,openRawBlock:16,rawBlock_repetition_plus0:17,END_RAW_BLOCK:18,OPEN_RAW_BLOCK:19,helperName:20,openRawBlock_repetition0:21,openRawBlock_option0:22,CLOSE_RAW_BLOCK:23,openBlock:24,block_option0:25,closeBlock:26,openInverse:27,block_option1:28,OPEN_BLOCK:29,openBlock_repetition0:30,openBlock_option0:31,openBlock_option1:32,CLOSE:33,OPEN_INVERSE:34,openInverse_repetition0:35,openInverse_option0:36,openInverse_option1:37,openInverseChain:38,OPEN_INVERSE_CHAIN:39,openInverseChain_repetition0:40,openInverseChain_option0:41,openInverseChain_option1:42,inverseAndProgram:43,INVERSE:44,inverseChain:45,inverseChain_option0:46,OPEN_ENDBLOCK:47,OPEN:48,mustache_repetition0:49,mustache_option0:50,OPEN_UNESCAPED:51,mustache_repetition1:52,mustache_option1:53,CLOSE_UNESCAPED:54,OPEN_PARTIAL:55,partialName:56,partial_repetition0:57,partial_option0:58,openPartialBlock:59,OPEN_PARTIAL_BLOCK:60,openPartialBlock_repetition0:61,openPartialBlock_option0:62,param:63,sexpr:64,OPEN_SEXPR:65,sexpr_repetition0:66,sexpr_option0:67,CLOSE_SEXPR:68,hash:69,hash_repetition_plus0:70,hashSegment:71,ID:72,EQUALS:73,blockParams:74,OPEN_BLOCK_PARAMS:75,blockParams_repetition_plus0:76,CLOSE_BLOCK_PARAMS:77,path:78,dataName:79,STRING:80,NUMBER:81,BOOLEAN:82,UNDEFINED:83,NULL:84,DATA:85,pathSegments:86,SEP:87,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",14:"COMMENT",15:"CONTENT",18:"END_RAW_BLOCK",19:"OPEN_RAW_BLOCK",23:"CLOSE_RAW_BLOCK",29:"OPEN_BLOCK",33:"CLOSE",34:"OPEN_INVERSE",39:"OPEN_INVERSE_CHAIN",44:"INVERSE",47:"OPEN_ENDBLOCK",48:"OPEN",51:"OPEN_UNESCAPED",54:"CLOSE_UNESCAPED",55:"OPEN_PARTIAL",60:"OPEN_PARTIAL_BLOCK",65:"OPEN_SEXPR",68:"CLOSE_SEXPR",72:"ID",73:"EQUALS",75:"OPEN_BLOCK_PARAMS",77:"CLOSE_BLOCK_PARAMS",80:"STRING",81:"NUMBER",82:"BOOLEAN",83:"UNDEFINED",84:"NULL",85:"DATA",87:"SEP"},productions_:[0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[13,1],[10,3],[16,5],[9,4],[9,4],[24,6],[27,6],[38,6],[43,2],[45,3],[45,1],[26,3],[8,5],[8,5],[11,5],[12,3],[59,5],[63,1],[63,1],[64,5],[69,1],[71,3],[74,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[56,1],[56,1],[79,2],[78,1],[86,3],[86,1],[6,0],[6,2],[17,1],[17,2],[21,0],[21,2],[22,0],[22,1],[25,0],[25,1],[28,0],[28,1],[30,0],[30,2],[31,0],[31,1],[32,0],[32,1],[35,0],[35,2],[36,0],[36,1],[37,0],[37,1],[40,0],[40,2],[41,0],[41,1],[42,0],[42,1],[46,0],[46,1],[49,0],[49,2],[50,0],[50,1],[52,0],[52,2],[53,0],[53,1],[57,0],[57,2],[58,0],[58,1],[61,0],[61,2],[62,0],[62,1],[66,0],[66,2],[67,0],[67,1],[70,1],[70,2],[76,1],[76,2]],performAction:function(t,e,n,r,i,s,a){var o=s.length-1;switch(i){case 1:return s[o-1];case 2:this.$=r.prepareProgram(s[o]);break;case 3:this.$=s[o];break;case 4:this.$=s[o];break;case 5:this.$=s[o];break;case 6:this.$=s[o];break;case 7:this.$=s[o];break;case 8:this.$=s[o];break;case 9:this.$={type:"CommentStatement",value:r.stripComment(s[o]),strip:r.stripFlags(s[o],s[o]),loc:r.locInfo(this._$)};break;case 10:this.$={type:"ContentStatement",original:s[o],value:s[o],loc:r.locInfo(this._$)};break;case 11:this.$=r.prepareRawBlock(s[o-2],s[o-1],s[o],this._$);break;case 12:this.$={path:s[o-3],params:s[o-2],hash:s[o-1]};break;case 13:this.$=r.prepareBlock(s[o-3],s[o-2],s[o-1],s[o],!1,this._$);break;case 14:this.$=r.prepareBlock(s[o-3],s[o-2],s[o-1],s[o],!0,this._$);break;case 15:this.$={open:s[o-5],path:s[o-4],params:s[o-3],hash:s[o-2],blockParams:s[o-1],strip:r.stripFlags(s[o-5],s[o])};break;case 16:this.$={path:s[o-4],params:s[o-3],hash:s[o-2],blockParams:s[o-1],strip:r.stripFlags(s[o-5],s[o])};break;case 17:this.$={path:s[o-4],params:s[o-3],hash:s[o-2],blockParams:s[o-1],strip:r.stripFlags(s[o-5],s[o])};break;case 18:this.$={strip:r.stripFlags(s[o-1],s[o-1]),program:s[o]};break;case 19:var u=r.prepareBlock(s[o-2],s[o-1],s[o],s[o],!1,this._$),c=r.prepareProgram([u],s[o-1].loc);c.chained=!0,this.$={strip:s[o-2].strip,program:c,chain:!0};break;case 20:this.$=s[o];break;case 21:this.$={path:s[o-1],strip:r.stripFlags(s[o-2],s[o])};break;case 22:this.$=r.prepareMustache(s[o-3],s[o-2],s[o-1],s[o-4],r.stripFlags(s[o-4],s[o]),this._$);break;case 23:this.$=r.prepareMustache(s[o-3],s[o-2],s[o-1],s[o-4],r.stripFlags(s[o-4],s[o]),this._$);break;case 24:this.$={type:"PartialStatement",name:s[o-3],params:s[o-2],hash:s[o-1],indent:"",strip:r.stripFlags(s[o-4],s[o]),loc:r.locInfo(this._$)};break;case 25:this.$=r.preparePartialBlock(s[o-2],s[o-1],s[o],this._$);break;case 26:this.$={path:s[o-3],params:s[o-2],hash:s[o-1],strip:r.stripFlags(s[o-4],s[o])};break;case 27:this.$=s[o];break;case 28:this.$=s[o];break;case 29:this.$={type:"SubExpression",path:s[o-3],params:s[o-2],hash:s[o-1],loc:r.locInfo(this._$)};break;case 30:this.$={type:"Hash",pairs:s[o],loc:r.locInfo(this._$)};break;case 31:this.$={type:"HashPair",key:r.id(s[o-2]),value:s[o],loc:r.locInfo(this._$)};break;case 32:this.$=r.id(s[o-1]);break;case 33:this.$=s[o];break;case 34:this.$=s[o];break;case 35:this.$={type:"StringLiteral",value:s[o],original:s[o],loc:r.locInfo(this._$)};break;case 36:this.$={type:"NumberLiteral",value:Number(s[o]),original:Number(s[o]),loc:r.locInfo(this._$)};break;case 37:this.$={type:"BooleanLiteral",value:"true"===s[o],original:"true"===s[o],loc:r.locInfo(this._$)};break;case 38:this.$={type:"UndefinedLiteral",original:void 0,value:void 0,loc:r.locInfo(this._$)};break;case 39:this.$={type:"NullLiteral",original:null,value:null,loc:r.locInfo(this._$)};break;case 40:this.$=s[o];break;case 41:this.$=s[o];break;case 42:this.$=r.preparePath(!0,s[o],this._$);break;case 43:this.$=r.preparePath(!1,s[o],this._$);break;case 44:s[o-2].push({part:r.id(s[o]),original:s[o],separator:s[o-1]}),this.$=s[o-2];break;case 45:this.$=[{part:r.id(s[o]),original:s[o]}];break;case 46:this.$=[];break;case 47:s[o-1].push(s[o]);break;case 48:this.$=[s[o]];break;case 49:s[o-1].push(s[o]);break;case 50:this.$=[];break;case 51:s[o-1].push(s[o]);break;case 58:this.$=[];break;case 59:s[o-1].push(s[o]);break;case 64:this.$=[];break;case 65:s[o-1].push(s[o]);break;case 70:this.$=[];break;case 71:s[o-1].push(s[o]);break;case 78:this.$=[];break;case 79:s[o-1].push(s[o]);break;case 82:this.$=[];break;case 83:s[o-1].push(s[o]);break;case 86:this.$=[];break;case 87:s[o-1].push(s[o]);break;case 90:this.$=[];break;case 91:s[o-1].push(s[o]);break;case 94:this.$=[];break;case 95:s[o-1].push(s[o]);break;case 98:this.$=[s[o]];break;case 99:s[o-1].push(s[o]);break;case 100:this.$=[s[o]];break;case 101:s[o-1].push(s[o])}},table:[{3:1,4:2,5:[2,46],6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{1:[3]},{5:[1,4]},{5:[2,2],7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:[1,12],15:[1,20],16:17,19:[1,23],24:15,27:16,29:[1,21],34:[1,22],39:[2,2],44:[2,2],47:[2,2],48:[1,13],51:[1,14],55:[1,18],59:19,60:[1,24]},{1:[2,1]},{5:[2,47],14:[2,47],15:[2,47],19:[2,47],29:[2,47],34:[2,47],39:[2,47],44:[2,47],47:[2,47],48:[2,47],51:[2,47],55:[2,47],60:[2,47]},{5:[2,3],14:[2,3],15:[2,3],19:[2,3],29:[2,3],34:[2,3],39:[2,3],44:[2,3],47:[2,3],48:[2,3],51:[2,3],55:[2,3],60:[2,3]},{5:[2,4],14:[2,4],15:[2,4],19:[2,4],29:[2,4],34:[2,4],39:[2,4],44:[2,4],47:[2,4],48:[2,4],51:[2,4],55:[2,4],60:[2,4]},{5:[2,5],14:[2,5],15:[2,5],19:[2,5],29:[2,5],34:[2,5],39:[2,5],44:[2,5],47:[2,5],48:[2,5],51:[2,5],55:[2,5],60:[2,5]},{5:[2,6],14:[2,6],15:[2,6],19:[2,6],29:[2,6],34:[2,6],39:[2,6],44:[2,6],47:[2,6],48:[2,6],51:[2,6],55:[2,6],60:[2,6]},{5:[2,7],14:[2,7],15:[2,7],19:[2,7],29:[2,7],34:[2,7],39:[2,7],44:[2,7],47:[2,7],48:[2,7],51:[2,7],55:[2,7],60:[2,7]},{5:[2,8],14:[2,8],15:[2,8],19:[2,8],29:[2,8],34:[2,8],39:[2,8],44:[2,8],47:[2,8],48:[2,8],51:[2,8],55:[2,8],60:[2,8]},{5:[2,9],14:[2,9],15:[2,9],19:[2,9],29:[2,9],34:[2,9],39:[2,9],44:[2,9],47:[2,9],48:[2,9],51:[2,9],55:[2,9],60:[2,9]},{20:25,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:36,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:37,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{4:38,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{13:40,15:[1,20],17:39},{20:42,56:41,64:43,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:45,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{5:[2,10],14:[2,10],15:[2,10],18:[2,10],19:[2,10],29:[2,10],34:[2,10],39:[2,10],44:[2,10],47:[2,10],48:[2,10],51:[2,10],55:[2,10],60:[2,10]},{20:46,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:47,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:48,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:42,56:49,64:43,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[2,78],49:50,65:[2,78],72:[2,78],80:[2,78],81:[2,78],82:[2,78],83:[2,78],84:[2,78],85:[2,78]},{23:[2,33],33:[2,33],54:[2,33],65:[2,33],68:[2,33],72:[2,33],75:[2,33],80:[2,33],81:[2,33],82:[2,33],83:[2,33],84:[2,33],85:[2,33]},{23:[2,34],33:[2,34],54:[2,34],65:[2,34],68:[2,34],72:[2,34],75:[2,34],80:[2,34],81:[2,34],82:[2,34],83:[2,34],84:[2,34],85:[2,34]},{23:[2,35],33:[2,35],54:[2,35],65:[2,35],68:[2,35],72:[2,35],75:[2,35],80:[2,35],81:[2,35],82:[2,35],83:[2,35],84:[2,35],85:[2,35]},{23:[2,36],33:[2,36],54:[2,36],65:[2,36],68:[2,36],72:[2,36],75:[2,36],80:[2,36],81:[2,36],82:[2,36],83:[2,36],84:[2,36],85:[2,36]},{23:[2,37],33:[2,37],54:[2,37],65:[2,37],68:[2,37],72:[2,37],75:[2,37],80:[2,37],81:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37]},{23:[2,38],33:[2,38],54:[2,38],65:[2,38],68:[2,38],72:[2,38],75:[2,38],80:[2,38],81:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38]},{23:[2,39],33:[2,39],54:[2,39],65:[2,39],68:[2,39],72:[2,39],75:[2,39],80:[2,39],81:[2,39],82:[2,39],83:[2,39],84:[2,39],85:[2,39]},{23:[2,43],33:[2,43],54:[2,43],65:[2,43],68:[2,43],72:[2,43],75:[2,43],80:[2,43],81:[2,43],82:[2,43],83:[2,43],84:[2,43],85:[2,43],87:[1,51]},{72:[1,35],86:52},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{52:53,54:[2,82],65:[2,82],72:[2,82],80:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82]},{25:54,38:56,39:[1,58],43:57,44:[1,59],45:55,47:[2,54]},{28:60,43:61,44:[1,59],47:[2,56]},{13:63,15:[1,20],18:[1,62]},{15:[2,48],18:[2,48]},{33:[2,86],57:64,65:[2,86],72:[2,86],80:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86]},{33:[2,40],65:[2,40],72:[2,40],80:[2,40],81:[2,40],82:[2,40],83:[2,40],84:[2,40],85:[2,40]},{33:[2,41],65:[2,41],72:[2,41],80:[2,41],81:[2,41],82:[2,41],83:[2,41],84:[2,41],85:[2,41]},{20:65,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:66,47:[1,67]},{30:68,33:[2,58],65:[2,58],72:[2,58],75:[2,58],80:[2,58],81:[2,58],82:[2,58],83:[2,58],84:[2,58],85:[2,58]},{33:[2,64],35:69,65:[2,64],72:[2,64],
75:[2,64],80:[2,64],81:[2,64],82:[2,64],83:[2,64],84:[2,64],85:[2,64]},{21:70,23:[2,50],65:[2,50],72:[2,50],80:[2,50],81:[2,50],82:[2,50],83:[2,50],84:[2,50],85:[2,50]},{33:[2,90],61:71,65:[2,90],72:[2,90],80:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90]},{20:75,33:[2,80],50:72,63:73,64:76,65:[1,44],69:74,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{72:[1,80]},{23:[2,42],33:[2,42],54:[2,42],65:[2,42],68:[2,42],72:[2,42],75:[2,42],80:[2,42],81:[2,42],82:[2,42],83:[2,42],84:[2,42],85:[2,42],87:[1,51]},{20:75,53:81,54:[2,84],63:82,64:76,65:[1,44],69:83,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:84,47:[1,67]},{47:[2,55]},{4:85,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{47:[2,20]},{20:86,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:87,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{26:88,47:[1,67]},{47:[2,57]},{5:[2,11],14:[2,11],15:[2,11],19:[2,11],29:[2,11],34:[2,11],39:[2,11],44:[2,11],47:[2,11],48:[2,11],51:[2,11],55:[2,11],60:[2,11]},{15:[2,49],18:[2,49]},{20:75,33:[2,88],58:89,63:90,64:76,65:[1,44],69:91,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{65:[2,94],66:92,68:[2,94],72:[2,94],80:[2,94],81:[2,94],82:[2,94],83:[2,94],84:[2,94],85:[2,94]},{5:[2,25],14:[2,25],15:[2,25],19:[2,25],29:[2,25],34:[2,25],39:[2,25],44:[2,25],47:[2,25],48:[2,25],51:[2,25],55:[2,25],60:[2,25]},{20:93,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,31:94,33:[2,60],63:95,64:76,65:[1,44],69:96,70:77,71:78,72:[1,79],75:[2,60],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,33:[2,66],36:97,63:98,64:76,65:[1,44],69:99,70:77,71:78,72:[1,79],75:[2,66],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,22:100,23:[2,52],63:101,64:76,65:[1,44],69:102,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,33:[2,92],62:103,63:104,64:76,65:[1,44],69:105,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,106]},{33:[2,79],65:[2,79],72:[2,79],80:[2,79],81:[2,79],82:[2,79],83:[2,79],84:[2,79],85:[2,79]},{33:[2,81]},{23:[2,27],33:[2,27],54:[2,27],65:[2,27],68:[2,27],72:[2,27],75:[2,27],80:[2,27],81:[2,27],82:[2,27],83:[2,27],84:[2,27],85:[2,27]},{23:[2,28],33:[2,28],54:[2,28],65:[2,28],68:[2,28],72:[2,28],75:[2,28],80:[2,28],81:[2,28],82:[2,28],83:[2,28],84:[2,28],85:[2,28]},{23:[2,30],33:[2,30],54:[2,30],68:[2,30],71:107,72:[1,108],75:[2,30]},{23:[2,98],33:[2,98],54:[2,98],68:[2,98],72:[2,98],75:[2,98]},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],73:[1,109],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{23:[2,44],33:[2,44],54:[2,44],65:[2,44],68:[2,44],72:[2,44],75:[2,44],80:[2,44],81:[2,44],82:[2,44],83:[2,44],84:[2,44],85:[2,44],87:[2,44]},{54:[1,110]},{54:[2,83],65:[2,83],72:[2,83],80:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83]},{54:[2,85]},{5:[2,13],14:[2,13],15:[2,13],19:[2,13],29:[2,13],34:[2,13],39:[2,13],44:[2,13],47:[2,13],48:[2,13],51:[2,13],55:[2,13],60:[2,13]},{38:56,39:[1,58],43:57,44:[1,59],45:112,46:111,47:[2,76]},{33:[2,70],40:113,65:[2,70],72:[2,70],75:[2,70],80:[2,70],81:[2,70],82:[2,70],83:[2,70],84:[2,70],85:[2,70]},{47:[2,18]},{5:[2,14],14:[2,14],15:[2,14],19:[2,14],29:[2,14],34:[2,14],39:[2,14],44:[2,14],47:[2,14],48:[2,14],51:[2,14],55:[2,14],60:[2,14]},{33:[1,114]},{33:[2,87],65:[2,87],72:[2,87],80:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],85:[2,87]},{33:[2,89]},{20:75,63:116,64:76,65:[1,44],67:115,68:[2,96],69:117,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,118]},{32:119,33:[2,62],74:120,75:[1,121]},{33:[2,59],65:[2,59],72:[2,59],75:[2,59],80:[2,59],81:[2,59],82:[2,59],83:[2,59],84:[2,59],85:[2,59]},{33:[2,61],75:[2,61]},{33:[2,68],37:122,74:123,75:[1,121]},{33:[2,65],65:[2,65],72:[2,65],75:[2,65],80:[2,65],81:[2,65],82:[2,65],83:[2,65],84:[2,65],85:[2,65]},{33:[2,67],75:[2,67]},{23:[1,124]},{23:[2,51],65:[2,51],72:[2,51],80:[2,51],81:[2,51],82:[2,51],83:[2,51],84:[2,51],85:[2,51]},{23:[2,53]},{33:[1,125]},{33:[2,91],65:[2,91],72:[2,91],80:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91]},{33:[2,93]},{5:[2,22],14:[2,22],15:[2,22],19:[2,22],29:[2,22],34:[2,22],39:[2,22],44:[2,22],47:[2,22],48:[2,22],51:[2,22],55:[2,22],60:[2,22]},{23:[2,99],33:[2,99],54:[2,99],68:[2,99],72:[2,99],75:[2,99]},{73:[1,109]},{20:75,63:126,64:76,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,23],14:[2,23],15:[2,23],19:[2,23],29:[2,23],34:[2,23],39:[2,23],44:[2,23],47:[2,23],48:[2,23],51:[2,23],55:[2,23],60:[2,23]},{47:[2,19]},{47:[2,77]},{20:75,33:[2,72],41:127,63:128,64:76,65:[1,44],69:129,70:77,71:78,72:[1,79],75:[2,72],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,24],14:[2,24],15:[2,24],19:[2,24],29:[2,24],34:[2,24],39:[2,24],44:[2,24],47:[2,24],48:[2,24],51:[2,24],55:[2,24],60:[2,24]},{68:[1,130]},{65:[2,95],68:[2,95],72:[2,95],80:[2,95],81:[2,95],82:[2,95],83:[2,95],84:[2,95],85:[2,95]},{68:[2,97]},{5:[2,21],14:[2,21],15:[2,21],19:[2,21],29:[2,21],34:[2,21],39:[2,21],44:[2,21],47:[2,21],48:[2,21],51:[2,21],55:[2,21],60:[2,21]},{33:[1,131]},{33:[2,63]},{72:[1,133],76:132},{33:[1,134]},{33:[2,69]},{15:[2,12]},{14:[2,26],15:[2,26],19:[2,26],29:[2,26],34:[2,26],47:[2,26],48:[2,26],51:[2,26],55:[2,26],60:[2,26]},{23:[2,31],33:[2,31],54:[2,31],68:[2,31],72:[2,31],75:[2,31]},{33:[2,74],42:135,74:136,75:[1,121]},{33:[2,71],65:[2,71],72:[2,71],75:[2,71],80:[2,71],81:[2,71],82:[2,71],83:[2,71],84:[2,71],85:[2,71]},{33:[2,73],75:[2,73]},{23:[2,29],33:[2,29],54:[2,29],65:[2,29],68:[2,29],72:[2,29],75:[2,29],80:[2,29],81:[2,29],82:[2,29],83:[2,29],84:[2,29],85:[2,29]},{14:[2,15],15:[2,15],19:[2,15],29:[2,15],34:[2,15],39:[2,15],44:[2,15],47:[2,15],48:[2,15],51:[2,15],55:[2,15],60:[2,15]},{72:[1,138],77:[1,137]},{72:[2,100],77:[2,100]},{14:[2,16],15:[2,16],19:[2,16],29:[2,16],34:[2,16],44:[2,16],47:[2,16],48:[2,16],51:[2,16],55:[2,16],60:[2,16]},{33:[1,139]},{33:[2,75]},{33:[2,32]},{72:[2,101],77:[2,101]},{14:[2,17],15:[2,17],19:[2,17],29:[2,17],34:[2,17],39:[2,17],44:[2,17],47:[2,17],48:[2,17],51:[2,17],55:[2,17],60:[2,17]}],defaultActions:{4:[2,1],55:[2,55],57:[2,20],61:[2,57],74:[2,81],83:[2,85],87:[2,18],91:[2,89],102:[2,53],105:[2,93],111:[2,19],112:[2,77],117:[2,97],120:[2,63],123:[2,69],124:[2,12],136:[2,75],137:[2,32]},parseError:function(t,e){throw new Error(t)},parse:function(t){function e(){var t;return t=n.lexer.lex()||1,"number"!=typeof t&&(t=n.symbols_[t]||t),t}var n=this,r=[0],i=[null],s=[],a=this.table,o="",u=0,c=0,l=0;this.lexer.setInput(t),this.lexer.yy=this.yy,this.yy.lexer=this.lexer,this.yy.parser=this,"undefined"==typeof this.lexer.yylloc&&(this.lexer.yylloc={});var h=this.lexer.yylloc;s.push(h);var p=this.lexer.options&&this.lexer.options.ranges;"function"==typeof this.yy.parseError&&(this.parseError=this.yy.parseError);for(var f,d,m,g,v,y,_,k,b,S={};;){if(m=r[r.length-1],this.defaultActions[m]?g=this.defaultActions[m]:((null===f||"undefined"==typeof f)&&(f=e()),g=a[m]&&a[m][f]),"undefined"==typeof g||!g.length||!g[0]){var w="";if(!l){b=[];for(y in a[m])this.terminals_[y]&&y>2&&b.push("'"+this.terminals_[y]+"'");w=this.lexer.showPosition?"Parse error on line "+(u+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+b.join(", ")+", got '"+(this.terminals_[f]||f)+"'":"Parse error on line "+(u+1)+": Unexpected "+(1==f?"end of input":"'"+(this.terminals_[f]||f)+"'"),this.parseError(w,{text:this.lexer.match,token:this.terminals_[f]||f,line:this.lexer.yylineno,loc:h,expected:b})}}if(g[0]instanceof Array&&g.length>1)throw new Error("Parse Error: multiple actions possible at state: "+m+", token: "+f);switch(g[0]){case 1:r.push(f),i.push(this.lexer.yytext),s.push(this.lexer.yylloc),r.push(g[1]),f=null,d?(f=d,d=null):(c=this.lexer.yyleng,o=this.lexer.yytext,u=this.lexer.yylineno,h=this.lexer.yylloc,l>0&&l--);break;case 2:if(_=this.productions_[g[1]][1],S.$=i[i.length-_],S._$={first_line:s[s.length-(_||1)].first_line,last_line:s[s.length-1].last_line,first_column:s[s.length-(_||1)].first_column,last_column:s[s.length-1].last_column},p&&(S._$.range=[s[s.length-(_||1)].range[0],s[s.length-1].range[1]]),v=this.performAction.call(S,o,c,u,this.yy,g[1],i,s),"undefined"!=typeof v)return v;_&&(r=r.slice(0,-1*_*2),i=i.slice(0,-1*_),s=s.slice(0,-1*_)),r.push(this.productions_[g[1]][0]),i.push(S.$),s.push(S._$),k=a[r[r.length-2]][r[r.length-1]],r.push(k);break;case 3:return!0}}return!0}},n=function(){var t={EOF:1,parseError:function(t,e){if(!this.yy.parser)throw new Error(t);this.yy.parser.parseError(t,e)},setInput:function(t){return this._input=t,this._more=this._less=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var t=this._input[0];this.yytext+=t,this.yyleng++,this.offset++,this.match+=t,this.matched+=t;var e=t.match(/(?:\r\n?|\n).*/g);return e?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),t},unput:function(t){var e=t.length,n=t.split(/(?:\r\n?|\n)/g);this._input=t+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-e-1),this.offset-=e;var r=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),n.length-1&&(this.yylineno-=n.length-1);var i=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:n?(n.length===r.length?this.yylloc.first_column:0)+r[r.length-n.length].length-n[0].length:this.yylloc.first_column-e},this.options.ranges&&(this.yylloc.range=[i[0],i[0]+this.yyleng-e]),this},more:function(){return this._more=!0,this},less:function(t){this.unput(this.match.slice(t))},pastInput:function(){var t=this.matched.substr(0,this.matched.length-this.match.length);return(t.length>20?"...":"")+t.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var t=this.match;return t.length<20&&(t+=this._input.substr(0,20-t.length)),(t.substr(0,20)+(t.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var t=this.pastInput(),e=new Array(t.length+1).join("-");return t+this.upcomingInput()+"\n"+e+"^"},next:function(){if(this.done)return this.EOF;this._input||(this.done=!0);var t,e,n,r,i;this._more||(this.yytext="",this.match="");for(var s=this._currentRules(),a=0;a<s.length&&(n=this._input.match(this.rules[s[a]]),!n||e&&!(n[0].length>e[0].length)||(e=n,r=a,this.options.flex));a++);return e?(i=e[0].match(/(?:\r\n?|\n).*/g),i&&(this.yylineno+=i.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:i?i[i.length-1].length-i[i.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+e[0].length},this.yytext+=e[0],this.match+=e[0],this.matches=e,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._input=this._input.slice(e[0].length),this.matched+=e[0],t=this.performAction.call(this,this.yy,this,s[r],this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),t?t:void 0):""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var t=this.next();return"undefined"!=typeof t?t:this.lex()},begin:function(t){this.conditionStack.push(t)},popState:function(){return this.conditionStack.pop()},_currentRules:function(){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules},topState:function(){return this.conditionStack[this.conditionStack.length-2]},pushState:function(t){this.begin(t)}};return t.options={},t.performAction=function(t,e,n,r){function i(t,n){return e.yytext=e.yytext.substr(t,e.yyleng-n)}switch(n){case 0:if("\\\\"===e.yytext.slice(-2)?(i(0,1),this.begin("mu")):"\\"===e.yytext.slice(-1)?(i(0,1),this.begin("emu")):this.begin("mu"),e.yytext)return 15;break;case 1:return 15;case 2:return this.popState(),15;case 3:return this.begin("raw"),15;case 4:return this.popState(),"raw"===this.conditionStack[this.conditionStack.length-1]?15:(e.yytext=e.yytext.substr(5,e.yyleng-9),"END_RAW_BLOCK");case 5:return 15;case 6:return this.popState(),14;case 7:return 65;case 8:return 68;case 9:return 19;case 10:return this.popState(),this.begin("raw"),23;case 11:return 55;case 12:return 60;case 13:return 29;case 14:return 47;case 15:return this.popState(),44;case 16:return this.popState(),44;case 17:return 34;case 18:return 39;case 19:return 51;case 20:return 48;case 21:this.unput(e.yytext),this.popState(),this.begin("com");break;case 22:return this.popState(),14;case 23:return 48;case 24:return 73;case 25:return 72;case 26:return 72;case 27:return 87;case 28:break;case 29:return this.popState(),54;case 30:return this.popState(),33;case 31:return e.yytext=i(1,2).replace(/\\"/g,'"'),80;case 32:return e.yytext=i(1,2).replace(/\\'/g,"'"),80;case 33:return 85;case 34:return 82;case 35:return 82;case 36:return 83;case 37:return 84;case 38:return 81;case 39:return 75;case 40:return 77;case 41:return 72;case 42:return e.yytext=e.yytext.replace(/\\([\\\]])/g,"$1"),72;case 43:return"INVALID";case 44:return 5}},t.rules=[/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,/^(?:\{\{\{\{(?=[^\/]))/,/^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/,/^(?:[^\x00]*?(?=(\{\{\{\{)))/,/^(?:[\s\S]*?--(~)?\}\})/,/^(?:\()/,/^(?:\))/,/^(?:\{\{\{\{)/,/^(?:\}\}\}\})/,/^(?:\{\{(~)?>)/,/^(?:\{\{(~)?#>)/,/^(?:\{\{(~)?#\*?)/,/^(?:\{\{(~)?\/)/,/^(?:\{\{(~)?\^\s*(~)?\}\})/,/^(?:\{\{(~)?\s*else\s*(~)?\}\})/,/^(?:\{\{(~)?\^)/,/^(?:\{\{(~)?\s*else\b)/,/^(?:\{\{(~)?\{)/,/^(?:\{\{(~)?&)/,/^(?:\{\{(~)?!--)/,/^(?:\{\{(~)?![\s\S]*?\}\})/,/^(?:\{\{(~)?\*?)/,/^(?:=)/,/^(?:\.\.)/,/^(?:\.(?=([=~}\s\/.)|])))/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}(~)?\}\})/,/^(?:(~)?\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\s)])))/,/^(?:false(?=([~}\s)])))/,/^(?:undefined(?=([~}\s)])))/,/^(?:null(?=([~}\s)])))/,/^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/,/^(?:as\s+\|)/,/^(?:\|)/,/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/,/^(?:\[(\\\]|[^\]])*\])/,/^(?:.)/,/^(?:$)/],t.conditions={mu:{rules:[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],inclusive:!1},emu:{rules:[2],inclusive:!1},com:{rules:[6],inclusive:!1},raw:{rules:[3,4,5],inclusive:!1},INITIAL:{rules:[0,1,44],inclusive:!0}},t}();return e.lexer=n,t.prototype=e,e.Parser=t,new t}();e.__esModule=!0,e["default"]=n},function(t,e,n){"use strict";function r(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.options=t}function i(t,e,n){void 0===e&&(e=t.length);var r=t[e-1],i=t[e-2];return r?"ContentStatement"===r.type?(i||!n?/\r?\n\s*?$/:/(^|\r?\n)\s*?$/).test(r.original):void 0:n}function s(t,e,n){void 0===e&&(e=-1);var r=t[e+1],i=t[e+2];return r?"ContentStatement"===r.type?(i||!n?/^\s*?\r?\n/:/^\s*?(\r?\n|$)/).test(r.original):void 0:n}function a(t,e,n){var r=t[null==e?0:e+1];if(r&&"ContentStatement"===r.type&&(n||!r.rightStripped)){var i=r.value;r.value=r.value.replace(n?/^\s+/:/^[ \t]*\r?\n?/,""),r.rightStripped=r.value!==i}}function o(t,e,n){var r=t[null==e?t.length-1:e-1];if(r&&"ContentStatement"===r.type&&(n||!r.leftStripped)){var i=r.value;return r.value=r.value.replace(n?/\s+$/:/[ \t]+$/,""),r.leftStripped=r.value!==i,r.leftStripped}}var u=n(1)["default"];e.__esModule=!0;var c=n(25),l=u(c);r.prototype=new l["default"],r.prototype.Program=function(t){var e=!this.options.ignoreStandalone,n=!this.isRootSeen;this.isRootSeen=!0;for(var r=t.body,u=0,c=r.length;c>u;u++){var l=r[u],h=this.accept(l);if(h){var p=i(r,u,n),f=s(r,u,n),d=h.openStandalone&&p,m=h.closeStandalone&&f,g=h.inlineStandalone&&p&&f;h.close&&a(r,u,!0),h.open&&o(r,u,!0),e&&g&&(a(r,u),o(r,u)&&"PartialStatement"===l.type&&(l.indent=/([ \t]+$)/.exec(r[u-1].original)[1])),e&&d&&(a((l.program||l.inverse).body),o(r,u)),e&&m&&(a(r,u),o((l.inverse||l.program).body))}}return t},r.prototype.BlockStatement=r.prototype.DecoratorBlock=r.prototype.PartialBlockStatement=function(t){this.accept(t.program),this.accept(t.inverse);var e=t.program||t.inverse,n=t.program&&t.inverse,r=n,u=n;if(n&&n.chained)for(r=n.body[0].program;u.chained;)u=u.body[u.body.length-1].program;var c={open:t.openStrip.open,close:t.closeStrip.close,openStandalone:s(e.body),closeStandalone:i((r||e).body)};if(t.openStrip.close&&a(e.body,null,!0),n){var l=t.inverseStrip;l.open&&o(e.body,null,!0),l.close&&a(r.body,null,!0),t.closeStrip.open&&o(u.body,null,!0),!this.options.ignoreStandalone&&i(e.body)&&s(r.body)&&(o(e.body),a(r.body))}else t.closeStrip.open&&o(e.body,null,!0);return c},r.prototype.Decorator=r.prototype.MustacheStatement=function(t){return t.strip},r.prototype.PartialStatement=r.prototype.CommentStatement=function(t){var e=t.strip||{};return{inlineStandalone:!0,open:e.open,close:e.close}},e["default"]=r,t.exports=e["default"]},function(t,e,n){"use strict";function r(){this.parents=[]}function i(t){this.acceptRequired(t,"path"),this.acceptArray(t.params),this.acceptKey(t,"hash")}function s(t){i.call(this,t),this.acceptKey(t,"program"),this.acceptKey(t,"inverse")}function a(t){this.acceptRequired(t,"name"),this.acceptArray(t.params),this.acceptKey(t,"hash")}var o=n(1)["default"];e.__esModule=!0;var u=n(6),c=o(u);r.prototype={constructor:r,mutating:!1,acceptKey:function(t,e){var n=this.accept(t[e]);if(this.mutating){if(n&&!r.prototype[n.type])throw new c["default"]('Unexpected node type "'+n.type+'" found when accepting '+e+" on "+t.type);t[e]=n}},acceptRequired:function(t,e){if(this.acceptKey(t,e),!t[e])throw new c["default"](t.type+" requires "+e)},acceptArray:function(t){for(var e=0,n=t.length;n>e;e++)this.acceptKey(t,e),t[e]||(t.splice(e,1),e--,n--)},accept:function(t){if(t){if(!this[t.type])throw new c["default"]("Unknown type: "+t.type,t);this.current&&this.parents.unshift(this.current),this.current=t;var e=this[t.type](t);return this.current=this.parents.shift(),!this.mutating||e?e:e!==!1?t:void 0}},Program:function(t){this.acceptArray(t.body)},MustacheStatement:i,Decorator:i,BlockStatement:s,DecoratorBlock:s,PartialStatement:a,PartialBlockStatement:function(t){a.call(this,t),this.acceptKey(t,"program")},ContentStatement:function(){},CommentStatement:function(){},SubExpression:i,PathExpression:function(){},StringLiteral:function(){},NumberLiteral:function(){},BooleanLiteral:function(){},UndefinedLiteral:function(){},NullLiteral:function(){},Hash:function(t){this.acceptArray(t.pairs)},HashPair:function(t){this.acceptRequired(t,"value")}},e["default"]=r,t.exports=e["default"]},function(t,e,n){"use strict";function r(t,e){if(e=e.path?e.path.original:e,t.path.original!==e){var n={loc:t.path.loc};throw new g["default"](t.path.original+" doesn't match "+e,n)}}function i(t,e){this.source=t,this.start={line:e.first_line,column:e.first_column},this.end={line:e.last_line,column:e.last_column}}function s(t){return/^\[.*\]$/.test(t)?t.substr(1,t.length-2):t}function a(t,e){return{open:"~"===t.charAt(2),close:"~"===e.charAt(e.length-3)}}function o(t){return t.replace(/^\{\{~?\!-?-?/,"").replace(/-?-?~?\}\}$/,"")}function u(t,e,n){n=this.locInfo(n);for(var r=t?"@":"",i=[],s=0,a="",o=0,u=e.length;u>o;o++){var c=e[o].part,l=e[o].original!==c;if(r+=(e[o].separator||"")+c,l||".."!==c&&"."!==c&&"this"!==c)i.push(c);else{if(i.length>0)throw new g["default"]("Invalid path: "+r,{loc:n});".."===c&&(s++,a+="../")}}return{type:"PathExpression",data:t,depth:s,parts:i,original:r,loc:n}}function c(t,e,n,r,i,s){var a=r.charAt(3)||r.charAt(2),o="{"!==a&&"&"!==a,u=/\*/.test(r);return{type:u?"Decorator":"MustacheStatement",path:t,params:e,hash:n,escaped:o,strip:i,loc:this.locInfo(s)}}function l(t,e,n,i){r(t,n),i=this.locInfo(i);var s={type:"Program",body:e,strip:{},loc:i};return{type:"BlockStatement",path:t.path,params:t.params,hash:t.hash,program:s,openStrip:{},inverseStrip:{},closeStrip:{},loc:i}}function h(t,e,n,i,s,a){i&&i.path&&r(t,i);var o=/\*/.test(t.open);e.blockParams=t.blockParams;var u=void 0,c=void 0;if(n){if(o)throw new g["default"]("Unexpected inverse block on decorator",n);n.chain&&(n.program.body[0].closeStrip=i.strip),c=n.strip,u=n.program}return s&&(s=u,u=e,e=s),{type:o?"DecoratorBlock":"BlockStatement",path:t.path,params:t.params,hash:t.hash,program:e,inverse:u,openStrip:t.strip,inverseStrip:c,closeStrip:i&&i.strip,loc:this.locInfo(a)}}function p(t,e){if(!e&&t.length){var n=t[0].loc,r=t[t.length-1].loc;n&&r&&(e={source:n.source,start:{line:n.start.line,column:n.start.column},end:{line:r.end.line,column:r.end.column}})}return{type:"Program",body:t,strip:{},loc:e}}function f(t,e,n,i){return r(t,n),{type:"PartialBlockStatement",name:t.path,params:t.params,hash:t.hash,program:e,openStrip:t.strip,closeStrip:n&&n.strip,loc:this.locInfo(i)}}var d=n(1)["default"];e.__esModule=!0,e.SourceLocation=i,e.id=s,e.stripFlags=a,e.stripComment=o,e.preparePath=u,e.prepareMustache=c,e.prepareRawBlock=l,e.prepareBlock=h,e.prepareProgram=p,e.preparePartialBlock=f;var m=n(6),g=d(m)},function(t,e,n){"use strict";function r(){}function i(t,e,n){if(null==t||"string"!=typeof t&&"Program"!==t.type)throw new l["default"]("You must pass a string or Handlebars AST to Handlebars.precompile. You passed "+t);e=e||{},"data"in e||(e.data=!0),e.compat&&(e.useDepths=!0);var r=n.parse(t,e),i=(new n.Compiler).compile(r,e);return(new n.JavaScriptCompiler).compile(i,e)}function s(t,e,n){function r(){var r=n.parse(t,e),i=(new n.Compiler).compile(r,e),s=(new n.JavaScriptCompiler).compile(i,e,void 0,!0);return n.template(s)}function i(t,e){return s||(s=r()),s.call(this,t,e)}if(void 0===e&&(e={}),null==t||"string"!=typeof t&&"Program"!==t.type)throw new l["default"]("You must pass a string or Handlebars AST to Handlebars.compile. You passed "+t);"data"in e||(e.data=!0),e.compat&&(e.useDepths=!0);var s=void 0;return i._setup=function(t){return s||(s=r()),s._setup(t)},i._child=function(t,e,n,i){return s||(s=r()),s._child(t,e,n,i)},i}function a(t,e){if(t===e)return!0;if(h.isArray(t)&&h.isArray(e)&&t.length===e.length){for(var n=0;n<t.length;n++)if(!a(t[n],e[n]))return!1;return!0}}function o(t){if(!t.path.parts){var e=t.path;t.path={type:"PathExpression",data:!1,depth:0,parts:[e.original+""],original:e.original+"",loc:e.loc}}}var u=n(1)["default"];e.__esModule=!0,e.Compiler=r,e.precompile=i,e.compile=s;var c=n(6),l=u(c),h=n(5),p=n(21),f=u(p),d=[].slice;r.prototype={compiler:r,equals:function(t){var e=this.opcodes.length;if(t.opcodes.length!==e)return!1;for(var n=0;e>n;n++){var r=this.opcodes[n],i=t.opcodes[n];if(r.opcode!==i.opcode||!a(r.args,i.args))return!1}e=this.children.length;for(var n=0;e>n;n++)if(!this.children[n].equals(t.children[n]))return!1;return!0},guid:0,compile:function(t,e){this.sourceNode=[],this.opcodes=[],this.children=[],this.options=e,this.stringParams=e.stringParams,this.trackIds=e.trackIds,e.blockParams=e.blockParams||[];var n=e.knownHelpers;if(e.knownHelpers={helperMissing:!0,blockHelperMissing:!0,each:!0,"if":!0,unless:!0,"with":!0,log:!0,lookup:!0},n)for(var r in n)r in n&&(e.knownHelpers[r]=n[r]);return this.accept(t)},compileProgram:function(t){var e=new this.compiler,n=e.compile(t,this.options),r=this.guid++;return this.usePartial=this.usePartial||n.usePartial,this.children[r]=n,this.useDepths=this.useDepths||n.useDepths,r},accept:function(t){if(!this[t.type])throw new l["default"]("Unknown type: "+t.type,t);this.sourceNode.unshift(t);var e=this[t.type](t);return this.sourceNode.shift(),e},Program:function(t){this.options.blockParams.unshift(t.blockParams);for(var e=t.body,n=e.length,r=0;n>r;r++)this.accept(e[r]);return this.options.blockParams.shift(),this.isSimple=1===n,this.blockParams=t.blockParams?t.blockParams.length:0,this},BlockStatement:function(t){o(t);var e=t.program,n=t.inverse;e=e&&this.compileProgram(e),n=n&&this.compileProgram(n);var r=this.classifySexpr(t);"helper"===r?this.helperSexpr(t,e,n):"simple"===r?(this.simpleSexpr(t),this.opcode("pushProgram",e),this.opcode("pushProgram",n),this.opcode("emptyHash"),this.opcode("blockValue",t.path.original)):(this.ambiguousSexpr(t,e,n),this.opcode("pushProgram",e),this.opcode("pushProgram",n),this.opcode("emptyHash"),this.opcode("ambiguousBlockValue")),this.opcode("append")},DecoratorBlock:function(t){var e=t.program&&this.compileProgram(t.program),n=this.setupFullMustacheParams(t,e,void 0),r=t.path;this.useDecorators=!0,this.opcode("registerDecorator",n.length,r.original)},PartialStatement:function(t){this.usePartial=!0;var e=t.program;e&&(e=this.compileProgram(t.program));var n=t.params;if(n.length>1)throw new l["default"]("Unsupported number of partial arguments: "+n.length,t);n.length||(this.options.explicitPartialContext?this.opcode("pushLiteral","undefined"):n.push({type:"PathExpression",parts:[],depth:0}));var r=t.name.original,i="SubExpression"===t.name.type;i&&this.accept(t.name),this.setupFullMustacheParams(t,e,void 0,!0);var s=t.indent||"";this.options.preventIndent&&s&&(this.opcode("appendContent",s),s=""),this.opcode("invokePartial",i,r,s),this.opcode("append")},PartialBlockStatement:function(t){this.PartialStatement(t)},MustacheStatement:function(t){this.SubExpression(t),t.escaped&&!this.options.noEscape?this.opcode("appendEscaped"):this.opcode("append")},Decorator:function(t){this.DecoratorBlock(t)},ContentStatement:function(t){t.value&&this.opcode("appendContent",t.value)},CommentStatement:function(){},SubExpression:function(t){o(t);var e=this.classifySexpr(t);"simple"===e?this.simpleSexpr(t):"helper"===e?this.helperSexpr(t):this.ambiguousSexpr(t)},ambiguousSexpr:function(t,e,n){var r=t.path,i=r.parts[0],s=null!=e||null!=n;this.opcode("getContext",r.depth),this.opcode("pushProgram",e),this.opcode("pushProgram",n),r.strict=!0,this.accept(r),this.opcode("invokeAmbiguous",i,s)},simpleSexpr:function(t){var e=t.path;e.strict=!0,this.accept(e),this.opcode("resolvePossibleLambda")},helperSexpr:function(t,e,n){var r=this.setupFullMustacheParams(t,e,n),i=t.path,s=i.parts[0];if(this.options.knownHelpers[s])this.opcode("invokeKnownHelper",r.length,s);else{if(this.options.knownHelpersOnly)throw new l["default"]("You specified knownHelpersOnly, but used the unknown helper "+s,t);i.strict=!0,i.falsy=!0,this.accept(i),this.opcode("invokeHelper",r.length,i.original,f["default"].helpers.simpleId(i))}},PathExpression:function(t){this.addDepth(t.depth),this.opcode("getContext",t.depth);var e=t.parts[0],n=f["default"].helpers.scopedId(t),r=!t.depth&&!n&&this.blockParamIndex(e);r?this.opcode("lookupBlockParam",r,t.parts):e?t.data?(this.options.data=!0,this.opcode("lookupData",t.depth,t.parts,t.strict)):this.opcode("lookupOnContext",t.parts,t.falsy,t.strict,n):this.opcode("pushContext")},StringLiteral:function(t){this.opcode("pushString",t.value)},NumberLiteral:function(t){this.opcode("pushLiteral",t.value)},BooleanLiteral:function(t){this.opcode("pushLiteral",t.value)},UndefinedLiteral:function(){this.opcode("pushLiteral","undefined")},NullLiteral:function(){this.opcode("pushLiteral","null")},Hash:function(t){var e=t.pairs,n=0,r=e.length;for(this.opcode("pushHash");r>n;n++)this.pushParam(e[n].value);for(;n--;)this.opcode("assignToHash",e[n].key);this.opcode("popHash")},opcode:function(t){this.opcodes.push({opcode:t,args:d.call(arguments,1),loc:this.sourceNode[0].loc})},addDepth:function(t){t&&(this.useDepths=!0)},classifySexpr:function(t){var e=f["default"].helpers.simpleId(t.path),n=e&&!!this.blockParamIndex(t.path.parts[0]),r=!n&&f["default"].helpers.helperExpression(t),i=!n&&(r||e);if(i&&!r){var s=t.path.parts[0],a=this.options;a.knownHelpers[s]?r=!0:a.knownHelpersOnly&&(i=!1)}return r?"helper":i?"ambiguous":"simple"},pushParams:function(t){for(var e=0,n=t.length;n>e;e++)this.pushParam(t[e])},pushParam:function(t){var e=null!=t.value?t.value:t.original||"";if(this.stringParams)e.replace&&(e=e.replace(/^(\.?\.\/)*/g,"").replace(/\//g,".")),t.depth&&this.addDepth(t.depth),this.opcode("getContext",t.depth||0),this.opcode("pushStringParam",e,t.type),"SubExpression"===t.type&&this.accept(t);else{if(this.trackIds){var n=void 0;if(!t.parts||f["default"].helpers.scopedId(t)||t.depth||(n=this.blockParamIndex(t.parts[0])),n){var r=t.parts.slice(1).join(".");this.opcode("pushId","BlockParam",n,r)}else e=t.original||e,e.replace&&(e=e.replace(/^this(?:\.|$)/,"").replace(/^\.\//,"").replace(/^\.$/,"")),this.opcode("pushId",t.type,e)}this.accept(t)}},setupFullMustacheParams:function(t,e,n,r){var i=t.params;return this.pushParams(i),this.opcode("pushProgram",e),this.opcode("pushProgram",n),t.hash?this.accept(t.hash):this.opcode("emptyHash",r),i},blockParamIndex:function(t){for(var e=0,n=this.options.blockParams.length;n>e;e++){var r=this.options.blockParams[e],i=r&&h.indexOf(r,t);if(r&&i>=0)return[e,i]}}}},function(t,e,n){"use strict";function r(t){this.value=t}function i(){}function s(t,e,n,r){var i=e.popStack(),s=0,a=n.length;for(t&&a--;a>s;s++)i=e.nameLookup(i,n[s],r);return t?[e.aliasable("container.strict"),"(",i,", ",e.quotedString(n[s]),")"]:i}var a=n(1)["default"];e.__esModule=!0;var o=n(4),u=n(6),c=a(u),l=n(5),h=n(29),p=a(h);i.prototype={nameLookup:function(t,e){return i.isValidJavaScriptVariableName(e)?[t,".",e]:[t,"[",JSON.stringify(e),"]"]},depthedLookup:function(t){return[this.aliasable("container.lookup"),'(depths, "',t,'")']},compilerInfo:function(){var t=o.COMPILER_REVISION,e=o.REVISION_CHANGES[t];return[t,e]},appendToBuffer:function(t,e,n){return l.isArray(t)||(t=[t]),t=this.source.wrap(t,e),this.environment.isSimple?["return ",t,";"]:n?["buffer += ",t,";"]:(t.appendToBuffer=!0,t)},initializeBuffer:function(){return this.quotedString("")},compile:function(t,e,n,r){this.environment=t,this.options=e,this.stringParams=this.options.stringParams,this.trackIds=this.options.trackIds,this.precompile=!r,this.name=this.environment.name,this.isChild=!!n,this.context=n||{decorators:[],programs:[],environments:[]},this.preamble(),this.stackSlot=0,this.stackVars=[],this.aliases={},this.registers={list:[]},this.hashes=[],this.compileStack=[],this.inlineStack=[],this.blockParams=[],this.compileChildren(t,e),this.useDepths=this.useDepths||t.useDepths||t.useDecorators||this.options.compat,this.useBlockParams=this.useBlockParams||t.useBlockParams;var i=t.opcodes,s=void 0,a=void 0,o=void 0,u=void 0;for(o=0,u=i.length;u>o;o++)s=i[o],this.source.currentLocation=s.loc,a=a||s.loc,this[s.opcode].apply(this,s.args);if(this.source.currentLocation=a,this.pushSource(""),this.stackSlot||this.inlineStack.length||this.compileStack.length)throw new c["default"]("Compile completed with content left on stack");this.decorators.isEmpty()?this.decorators=void 0:(this.useDecorators=!0,this.decorators.prepend("var decorators = container.decorators;\n"),this.decorators.push("return fn;"),r?this.decorators=Function.apply(this,["fn","props","container","depth0","data","blockParams","depths",this.decorators.merge()]):(this.decorators.prepend("function(fn, props, container, depth0, data, blockParams, depths) {\n"),this.decorators.push("}\n"),this.decorators=this.decorators.merge()));var l=this.createFunctionContext(r);if(this.isChild)return l;var h={compiler:this.compilerInfo(),main:l};this.decorators&&(h.main_d=this.decorators,
h.useDecorators=!0);var p=this.context,f=p.programs,d=p.decorators;for(o=0,u=f.length;u>o;o++)f[o]&&(h[o]=f[o],d[o]&&(h[o+"_d"]=d[o],h.useDecorators=!0));return this.environment.usePartial&&(h.usePartial=!0),this.options.data&&(h.useData=!0),this.useDepths&&(h.useDepths=!0),this.useBlockParams&&(h.useBlockParams=!0),this.options.compat&&(h.compat=!0),r?h.compilerOptions=this.options:(h.compiler=JSON.stringify(h.compiler),this.source.currentLocation={start:{line:1,column:0}},h=this.objectLiteral(h),e.srcName?(h=h.toStringWithSourceMap({file:e.destName}),h.map=h.map&&h.map.toString()):h=h.toString()),h},preamble:function(){this.lastContext=0,this.source=new p["default"](this.options.srcName),this.decorators=new p["default"](this.options.srcName)},createFunctionContext:function(t){var e="",n=this.stackVars.concat(this.registers.list);n.length>0&&(e+=", "+n.join(", "));var r=0;for(var i in this.aliases){var s=this.aliases[i];this.aliases.hasOwnProperty(i)&&s.children&&s.referenceCount>1&&(e+=", alias"+ ++r+"="+i,s.children[0]="alias"+r)}var a=["container","depth0","helpers","partials","data"];(this.useBlockParams||this.useDepths)&&a.push("blockParams"),this.useDepths&&a.push("depths");var o=this.mergeSource(e);return t?(a.push(o),Function.apply(this,a)):this.source.wrap(["function(",a.join(","),") {\n  ",o,"}"])},mergeSource:function(t){var e=this.environment.isSimple,n=!this.forceBuffer,r=void 0,i=void 0,s=void 0,a=void 0;return this.source.each(function(t){t.appendToBuffer?(s?t.prepend("  + "):s=t,a=t):(s&&(i?s.prepend("buffer += "):r=!0,a.add(";"),s=a=void 0),i=!0,e||(n=!1))}),n?s?(s.prepend("return "),a.add(";")):i||this.source.push('return "";'):(t+=", buffer = "+(r?"":this.initializeBuffer()),s?(s.prepend("return buffer + "),a.add(";")):this.source.push("return buffer;")),t&&this.source.prepend("var "+t.substring(2)+(r?"":";\n")),this.source.merge()},blockValue:function(t){var e=this.aliasable("helpers.blockHelperMissing"),n=[this.contextName(0)];this.setupHelperArgs(t,0,n);var r=this.popStack();n.splice(1,0,r),this.push(this.source.functionCall(e,"call",n))},ambiguousBlockValue:function(){var t=this.aliasable("helpers.blockHelperMissing"),e=[this.contextName(0)];this.setupHelperArgs("",0,e,!0),this.flushInline();var n=this.topStack();e.splice(1,0,n),this.pushSource(["if (!",this.lastHelper,") { ",n," = ",this.source.functionCall(t,"call",e),"}"])},appendContent:function(t){this.pendingContent?t=this.pendingContent+t:this.pendingLocation=this.source.currentLocation,this.pendingContent=t},append:function(){if(this.isInline())this.replaceStack(function(t){return[" != null ? ",t,' : ""']}),this.pushSource(this.appendToBuffer(this.popStack()));else{var t=this.popStack();this.pushSource(["if (",t," != null) { ",this.appendToBuffer(t,void 0,!0)," }"]),this.environment.isSimple&&this.pushSource(["else { ",this.appendToBuffer("''",void 0,!0)," }"])}},appendEscaped:function(){this.pushSource(this.appendToBuffer([this.aliasable("container.escapeExpression"),"(",this.popStack(),")"]))},getContext:function(t){this.lastContext=t},pushContext:function(){this.pushStackLiteral(this.contextName(this.lastContext))},lookupOnContext:function(t,e,n,r){var i=0;r||!this.options.compat||this.lastContext?this.pushContext():this.push(this.depthedLookup(t[i++])),this.resolvePath("context",t,i,e,n)},lookupBlockParam:function(t,e){this.useBlockParams=!0,this.push(["blockParams[",t[0],"][",t[1],"]"]),this.resolvePath("context",e,1)},lookupData:function(t,e,n){t?this.pushStackLiteral("container.data(data, "+t+")"):this.pushStackLiteral("data"),this.resolvePath("data",e,0,!0,n)},resolvePath:function(t,e,n,r,i){var a=this;if(this.options.strict||this.options.assumeObjects)return void this.push(s(this.options.strict&&i,this,e,t));for(var o=e.length;o>n;n++)this.replaceStack(function(i){var s=a.nameLookup(i,e[n],t);return r?[" && ",s]:[" != null ? ",s," : ",i]})},resolvePossibleLambda:function(){this.push([this.aliasable("container.lambda"),"(",this.popStack(),", ",this.contextName(0),")"])},pushStringParam:function(t,e){this.pushContext(),this.pushString(e),"SubExpression"!==e&&("string"==typeof t?this.pushString(t):this.pushStackLiteral(t))},emptyHash:function(t){this.trackIds&&this.push("{}"),this.stringParams&&(this.push("{}"),this.push("{}")),this.pushStackLiteral(t?"undefined":"{}")},pushHash:function(){this.hash&&this.hashes.push(this.hash),this.hash={values:[],types:[],contexts:[],ids:[]}},popHash:function(){var t=this.hash;this.hash=this.hashes.pop(),this.trackIds&&this.push(this.objectLiteral(t.ids)),this.stringParams&&(this.push(this.objectLiteral(t.contexts)),this.push(this.objectLiteral(t.types))),this.push(this.objectLiteral(t.values))},pushString:function(t){this.pushStackLiteral(this.quotedString(t))},pushLiteral:function(t){this.pushStackLiteral(t)},pushProgram:function(t){null!=t?this.pushStackLiteral(this.programExpression(t)):this.pushStackLiteral(null)},registerDecorator:function(t,e){var n=this.nameLookup("decorators",e,"decorator"),r=this.setupHelperArgs(e,t);this.decorators.push(["fn = ",this.decorators.functionCall(n,"",["fn","props","container",r])," || fn;"])},invokeHelper:function(t,e,n){var r=this.popStack(),i=this.setupHelper(t,e),s=n?[i.name," || "]:"",a=["("].concat(s,r);this.options.strict||a.push(" || ",this.aliasable("helpers.helperMissing")),a.push(")"),this.push(this.source.functionCall(a,"call",i.callParams))},invokeKnownHelper:function(t,e){var n=this.setupHelper(t,e);this.push(this.source.functionCall(n.name,"call",n.callParams))},invokeAmbiguous:function(t,e){this.useRegister("helper");var n=this.popStack();this.emptyHash();var r=this.setupHelper(0,t,e),i=this.lastHelper=this.nameLookup("helpers",t,"helper"),s=["(","(helper = ",i," || ",n,")"];this.options.strict||(s[0]="(helper = ",s.push(" != null ? helper : ",this.aliasable("helpers.helperMissing"))),this.push(["(",s,r.paramsInit?["),(",r.paramsInit]:[],"),","(typeof helper === ",this.aliasable('"function"')," ? ",this.source.functionCall("helper","call",r.callParams)," : helper))"])},invokePartial:function(t,e,n){var r=[],i=this.setupParams(e,1,r);t&&(e=this.popStack(),delete i.name),n&&(i.indent=JSON.stringify(n)),i.helpers="helpers",i.partials="partials",i.decorators="container.decorators",t?r.unshift(e):r.unshift(this.nameLookup("partials",e,"partial")),this.options.compat&&(i.depths="depths"),i=this.objectLiteral(i),r.push(i),this.push(this.source.functionCall("container.invokePartial","",r))},assignToHash:function(t){var e=this.popStack(),n=void 0,r=void 0,i=void 0;this.trackIds&&(i=this.popStack()),this.stringParams&&(r=this.popStack(),n=this.popStack());var s=this.hash;n&&(s.contexts[t]=n),r&&(s.types[t]=r),i&&(s.ids[t]=i),s.values[t]=e},pushId:function(t,e,n){"BlockParam"===t?this.pushStackLiteral("blockParams["+e[0]+"].path["+e[1]+"]"+(n?" + "+JSON.stringify("."+n):"")):"PathExpression"===t?this.pushString(e):"SubExpression"===t?this.pushStackLiteral("true"):this.pushStackLiteral("null")},compiler:i,compileChildren:function(t,e){for(var n=t.children,r=void 0,i=void 0,s=0,a=n.length;a>s;s++){r=n[s],i=new this.compiler;var o=this.matchExistingProgram(r);null==o?(this.context.programs.push(""),o=this.context.programs.length,r.index=o,r.name="program"+o,this.context.programs[o]=i.compile(r,e,this.context,!this.precompile),this.context.decorators[o]=i.decorators,this.context.environments[o]=r,this.useDepths=this.useDepths||i.useDepths,this.useBlockParams=this.useBlockParams||i.useBlockParams):(r.index=o,r.name="program"+o,this.useDepths=this.useDepths||r.useDepths,this.useBlockParams=this.useBlockParams||r.useBlockParams)}},matchExistingProgram:function(t){for(var e=0,n=this.context.environments.length;n>e;e++){var r=this.context.environments[e];if(r&&r.equals(t))return e}},programExpression:function(t){var e=this.environment.children[t],n=[e.index,"data",e.blockParams];return(this.useBlockParams||this.useDepths)&&n.push("blockParams"),this.useDepths&&n.push("depths"),"container.program("+n.join(", ")+")"},useRegister:function(t){this.registers[t]||(this.registers[t]=!0,this.registers.list.push(t))},push:function(t){return t instanceof r||(t=this.source.wrap(t)),this.inlineStack.push(t),t},pushStackLiteral:function(t){this.push(new r(t))},pushSource:function(t){this.pendingContent&&(this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent),this.pendingLocation)),this.pendingContent=void 0),t&&this.source.push(t)},replaceStack:function(t){var e=["("],n=void 0,i=void 0,s=void 0;if(!this.isInline())throw new c["default"]("replaceStack on non-inline");var a=this.popStack(!0);if(a instanceof r)n=[a.value],e=["(",n],s=!0;else{i=!0;var o=this.incrStack();e=["((",this.push(o)," = ",a,")"],n=this.topStack()}var u=t.call(this,n);s||this.popStack(),i&&this.stackSlot--,this.push(e.concat(u,")"))},incrStack:function(){return this.stackSlot++,this.stackSlot>this.stackVars.length&&this.stackVars.push("stack"+this.stackSlot),this.topStackName()},topStackName:function(){return"stack"+this.stackSlot},flushInline:function(){var t=this.inlineStack;this.inlineStack=[];for(var e=0,n=t.length;n>e;e++){var i=t[e];if(i instanceof r)this.compileStack.push(i);else{var s=this.incrStack();this.pushSource([s," = ",i,";"]),this.compileStack.push(s)}}},isInline:function(){return this.inlineStack.length},popStack:function(t){var e=this.isInline(),n=(e?this.inlineStack:this.compileStack).pop();if(!t&&n instanceof r)return n.value;if(!e){if(!this.stackSlot)throw new c["default"]("Invalid stack pop");this.stackSlot--}return n},topStack:function(){var t=this.isInline()?this.inlineStack:this.compileStack,e=t[t.length-1];return e instanceof r?e.value:e},contextName:function(t){return this.useDepths&&t?"depths["+t+"]":"depth"+t},quotedString:function(t){return this.source.quotedString(t)},objectLiteral:function(t){return this.source.objectLiteral(t)},aliasable:function(t){var e=this.aliases[t];return e?(e.referenceCount++,e):(e=this.aliases[t]=this.source.wrap(t),e.aliasable=!0,e.referenceCount=1,e)},setupHelper:function(t,e,n){var r=[],i=this.setupHelperArgs(e,t,r,n),s=this.nameLookup("helpers",e,"helper"),a=this.aliasable(this.contextName(0)+" != null ? "+this.contextName(0)+" : {}");return{params:r,paramsInit:i,name:s,callParams:[a].concat(r)}},setupParams:function(t,e,n){var r={},i=[],s=[],a=[],o=!n,u=void 0;o&&(n=[]),r.name=this.quotedString(t),r.hash=this.popStack(),this.trackIds&&(r.hashIds=this.popStack()),this.stringParams&&(r.hashTypes=this.popStack(),r.hashContexts=this.popStack());var c=this.popStack(),l=this.popStack();(l||c)&&(r.fn=l||"container.noop",r.inverse=c||"container.noop");for(var h=e;h--;)u=this.popStack(),n[h]=u,this.trackIds&&(a[h]=this.popStack()),this.stringParams&&(s[h]=this.popStack(),i[h]=this.popStack());return o&&(r.args=this.source.generateArray(n)),this.trackIds&&(r.ids=this.source.generateArray(a)),this.stringParams&&(r.types=this.source.generateArray(s),r.contexts=this.source.generateArray(i)),this.options.data&&(r.data="data"),this.useBlockParams&&(r.blockParams="blockParams"),r},setupHelperArgs:function(t,e,n,r){var i=this.setupParams(t,e,n);return i=this.objectLiteral(i),r?(this.useRegister("options"),n.push("options"),["options=",i]):n?(n.push(i),""):i}},function(){for(var t="break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(" "),e=i.RESERVED_WORDS={},n=0,r=t.length;r>n;n++)e[t[n]]=!0}(),i.isValidJavaScriptVariableName=function(t){return!i.RESERVED_WORDS[t]&&/^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(t)},e["default"]=i,t.exports=e["default"]},function(t,e,n){"use strict";function r(t,e,n){if(s.isArray(t)){for(var r=[],i=0,a=t.length;a>i;i++)r.push(e.wrap(t[i],n));return r}return"boolean"==typeof t||"number"==typeof t?t+"":t}function i(t){this.srcFile=t,this.source=[]}e.__esModule=!0;var s=n(5),a=void 0;try{}catch(o){}a||(a=function(t,e,n,r){this.src="",r&&this.add(r)},a.prototype={add:function(t){s.isArray(t)&&(t=t.join("")),this.src+=t},prepend:function(t){s.isArray(t)&&(t=t.join("")),this.src=t+this.src},toStringWithSourceMap:function(){return{code:this.toString()}},toString:function(){return this.src}}),i.prototype={isEmpty:function(){return!this.source.length},prepend:function(t,e){this.source.unshift(this.wrap(t,e))},push:function(t,e){this.source.push(this.wrap(t,e))},merge:function(){var t=this.empty();return this.each(function(e){t.add(["  ",e,"\n"])}),t},each:function(t){for(var e=0,n=this.source.length;n>e;e++)t(this.source[e])},empty:function(){var t=this.currentLocation||{start:{}};return new a(t.start.line,t.start.column,this.srcFile)},wrap:function(t){var e=arguments.length<=1||void 0===arguments[1]?this.currentLocation||{start:{}}:arguments[1];return t instanceof a?t:(t=r(t,this,e),new a(e.start.line,e.start.column,this.srcFile,t))},functionCall:function(t,e,n){return n=this.generateList(n),this.wrap([t,e?"."+e+"(":"(",n,")"])},quotedString:function(t){return'"'+(t+"").replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")+'"'},objectLiteral:function(t){var e=[];for(var n in t)if(t.hasOwnProperty(n)){var i=r(t[n],this);"undefined"!==i&&e.push([this.quotedString(n),":",i])}var s=this.generateList(e);return s.prepend("{"),s.add("}"),s},generateList:function(t){for(var e=this.empty(),n=0,i=t.length;i>n;n++)n&&e.add(","),e.add(r(t[n],this));return e},generateArray:function(t){var e=this.generateList(t);return e.prepend("["),e.add("]"),e}},e["default"]=i,t.exports=e["default"]}])}),function(t){if("function"==typeof define&&define.amd)define(t);else if("object"==typeof exports)module.exports=t();else{var e=window.Cookies,n=window.Cookies=t();n.noConflict=function(){return window.Cookies=e,n}}}(function(){function t(){for(var t=0,e={};t<arguments.length;t++){var n=arguments[t];for(var r in n)e[r]=n[r]}return e}function e(n){function r(e,i,s){var a;if(arguments.length>1){if(s=t({path:"/"},r.defaults,s),"number"==typeof s.expires){var o=new Date;o.setMilliseconds(o.getMilliseconds()+864e5*s.expires),s.expires=o}try{a=JSON.stringify(i),/^[\{\[]/.test(a)&&(i=a)}catch(u){}return i=encodeURIComponent(String(i)),i=i.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent),e=encodeURIComponent(String(e)),e=e.replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent),e=e.replace(/[\(\)]/g,escape),document.cookie=[e,"=",i,s.expires&&"; expires="+s.expires.toUTCString(),s.path&&"; path="+s.path,s.domain&&"; domain="+s.domain,s.secure?"; secure":""].join("")}e||(a={});for(var c=document.cookie?document.cookie.split("; "):[],l=/(%[0-9A-Z]{2})+/g,h=0;h<c.length;h++){var p=c[h].split("="),f=p[0].replace(l,decodeURIComponent),d=p.slice(1).join("=");'"'===d.charAt(0)&&(d=d.slice(1,-1));try{if(d=n&&n(d,f)||d.replace(l,decodeURIComponent),this.json)try{d=JSON.parse(d)}catch(u){}if(e===f){a=d;break}e||(a[f]=d)}catch(u){}}return a}return r.get=r.set=r,r.getJSON=function(){return r.apply({json:!0},[].slice.call(arguments))},r.defaults={},r.remove=function(e,n){r(e,"",t(n,{expires:-1}))},r.withConverter=e,r}return e()}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.moment=e()}(this,function(){"use strict";function t(){return Nn.apply(null,arguments)}function e(t){Nn=t}function n(t){return"[object Array]"===Object.prototype.toString.call(t)}function r(t){return t instanceof Date||"[object Date]"===Object.prototype.toString.call(t)}function i(t,e){var n,r=[];for(n=0;n<t.length;++n)r.push(e(t[n],n));return r}function s(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function a(t,e){for(var n in e)s(e,n)&&(t[n]=e[n]);return s(e,"toString")&&(t.toString=e.toString),s(e,"valueOf")&&(t.valueOf=e.valueOf),t}function o(t,e,n,r){return Et(t,e,n,r,!0).utc()}function u(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function c(t){return null==t._pf&&(t._pf=u()),t._pf}function l(t){if(null==t._isValid){var e=c(t);t._isValid=!(isNaN(t._d.getTime())||!(e.overflow<0)||e.empty||e.invalidMonth||e.invalidWeekday||e.nullInput||e.invalidFormat||e.userInvalidated),t._strict&&(t._isValid=t._isValid&&0===e.charsLeftOver&&0===e.unusedTokens.length&&void 0===e.bigHour)}return t._isValid}function h(t){var e=o(NaN);return null!=t?a(c(e),t):c(e).userInvalidated=!0,e}function p(t,e){var n,r,i;if("undefined"!=typeof e._isAMomentObject&&(t._isAMomentObject=e._isAMomentObject),"undefined"!=typeof e._i&&(t._i=e._i),"undefined"!=typeof e._f&&(t._f=e._f),"undefined"!=typeof e._l&&(t._l=e._l),"undefined"!=typeof e._strict&&(t._strict=e._strict),"undefined"!=typeof e._tzm&&(t._tzm=e._tzm),"undefined"!=typeof e._isUTC&&(t._isUTC=e._isUTC),"undefined"!=typeof e._offset&&(t._offset=e._offset),"undefined"!=typeof e._pf&&(t._pf=c(e)),"undefined"!=typeof e._locale&&(t._locale=e._locale),Ln.length>0)for(n in Ln)r=Ln[n],i=e[r],"undefined"!=typeof i&&(t[r]=i);return t}function f(e){p(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),Yn===!1&&(Yn=!0,t.updateOffset(this),Yn=!1)}function d(t){return t instanceof f||null!=t&&null!=t._isAMomentObject}function m(t){return 0>t?Math.ceil(t):Math.floor(t)}function g(t){var e=+t,n=0;return 0!==e&&isFinite(e)&&(n=m(e)),n}function v(t,e,n){var r,i=Math.min(t.length,e.length),s=Math.abs(t.length-e.length),a=0;for(r=0;i>r;r++)(n&&t[r]!==e[r]||!n&&g(t[r])!==g(e[r]))&&a++;return a+s}function y(){}function _(t){return t?t.toLowerCase().replace("_","-"):t}function k(t){for(var e,n,r,i,s=0;s<t.length;){for(i=_(t[s]).split("-"),e=i.length,n=_(t[s+1]),n=n?n.split("-"):null;e>0;){if(r=b(i.slice(0,e).join("-")))return r;if(n&&n.length>=e&&v(i,n,!0)>=e-1)break;e--}s++}return null}function b(t){var e=null;if(!Hn[t]&&"undefined"!=typeof module&&module&&module.exports)try{e=$n._abbr,require("./locale/"+t),S(e)}catch(n){}return Hn[t]}function S(t,e){var n;return t&&(n="undefined"==typeof e?x(t):w(t,e),n&&($n=n)),$n._abbr}function w(t,e){return null!==e?(e.abbr=t,Hn[t]=Hn[t]||new y,Hn[t].set(e),S(t),Hn[t]):(delete Hn[t],null)}function x(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return $n;if(!n(t)){if(e=b(t))return e;t=[t]}return k(t)}function P(t,e){var n=t.toLowerCase();Bn[n]=Bn[n+"s"]=Bn[e]=t}function M(t){return"string"==typeof t?Bn[t]||Bn[t.toLowerCase()]:void 0}function D(t){var e,n,r={};for(n in t)s(t,n)&&(e=M(n),e&&(r[e]=t[n]));return r}function E(e,n){return function(r){return null!=r?(O(this,e,r),t.updateOffset(this,n),this):C(this,e)}}function C(t,e){return t._d["get"+(t._isUTC?"UTC":"")+e]()}function O(t,e,n){return t._d["set"+(t._isUTC?"UTC":"")+e](n)}function A(t,e){var n;if("object"==typeof t)for(n in t)this.set(n,t[n]);else if(t=M(t),"function"==typeof this[t])return this[t](e);return this}function T(t,e,n){var r=""+Math.abs(t),i=e-r.length,s=t>=0;return(s?n?"+":"":"-")+Math.pow(10,Math.max(0,i)).toString().substr(1)+r}function I(t,e,n,r){var i=r;"string"==typeof r&&(i=function(){return this[r]()}),t&&(Un[t]=i),e&&(Un[e[0]]=function(){return T(i.apply(this,arguments),e[1],e[2])}),n&&(Un[n]=function(){return this.localeData().ordinal(i.apply(this,arguments),t)})}function N(t){return t.match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"")}function $(t){var e,n,r=t.match(Fn);for(e=0,n=r.length;n>e;e++)Un[r[e]]?r[e]=Un[r[e]]:r[e]=N(r[e]);return function(i){var s="";for(e=0;n>e;e++)s+=r[e]instanceof Function?r[e].call(i,t):r[e];return s}}function L(t,e){return t.isValid()?(e=Y(e,t.localeData()),Rn[e]=Rn[e]||$(e),Rn[e](t)):t.localeData().invalidDate()}function Y(t,e){function n(t){return e.longDateFormat(t)||t}var r=5;for(jn.lastIndex=0;r>=0&&jn.test(t);)t=t.replace(jn,n),jn.lastIndex=0,r-=1;return t}function H(t){return"function"==typeof t&&"[object Function]"===Object.prototype.toString.call(t)}function B(t,e,n){ir[t]=H(e)?e:function(t){return t&&n?n:e}}function F(t,e){return s(ir,t)?ir[t](e._strict,e._locale):new RegExp(j(t))}function j(t){return t.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,e,n,r,i){return e||n||r||i}).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function R(t,e){var n,r=e;for("string"==typeof t&&(t=[t]),"number"==typeof e&&(r=function(t,n){n[e]=g(t)}),n=0;n<t.length;n++)sr[t[n]]=r}function U(t,e){R(t,function(t,n,r,i){r._w=r._w||{},e(t,r._w,r,i)})}function W(t,e,n){null!=e&&s(sr,t)&&sr[t](e,n._a,n,t)}function V(t,e){return new Date(Date.UTC(t,e+1,0)).getUTCDate()}function G(t){return this._months[t.month()]}function z(t){return this._monthsShort[t.month()]}function q(t,e,n){var r,i,s;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;12>r;r++){if(i=o([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(i,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(i,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(s="^"+this.months(i,"")+"|^"+this.monthsShort(i,""),this._monthsParse[r]=new RegExp(s.replace(".",""),"i")),n&&"MMMM"===e&&this._longMonthsParse[r].test(t))return r;if(n&&"MMM"===e&&this._shortMonthsParse[r].test(t))return r;if(!n&&this._monthsParse[r].test(t))return r}}function J(t,e){var n;return"string"==typeof e&&(e=t.localeData().monthsParse(e),"number"!=typeof e)?t:(n=Math.min(t.date(),V(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n),t)}function K(e){return null!=e?(J(this,e),t.updateOffset(this,!0),this):C(this,"Month")}function Z(){return V(this.year(),this.month())}function X(t){var e,n=t._a;return n&&-2===c(t).overflow&&(e=n[or]<0||n[or]>11?or:n[ur]<1||n[ur]>V(n[ar],n[or])?ur:n[cr]<0||n[cr]>24||24===n[cr]&&(0!==n[lr]||0!==n[hr]||0!==n[pr])?cr:n[lr]<0||n[lr]>59?lr:n[hr]<0||n[hr]>59?hr:n[pr]<0||n[pr]>999?pr:-1,c(t)._overflowDayOfYear&&(ar>e||e>ur)&&(e=ur),c(t).overflow=e),t}function Q(e){t.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function tt(t,e){var n=!0;return a(function(){return n&&(Q(t+"\n"+(new Error).stack),n=!1),e.apply(this,arguments)},e)}function et(t,e){mr[t]||(Q(e),mr[t]=!0)}function nt(t){var e,n,r=t._i,i=gr.exec(r);if(i){for(c(t).iso=!0,e=0,n=vr.length;n>e;e++)if(vr[e][1].exec(r)){t._f=vr[e][0];break}for(e=0,n=yr.length;n>e;e++)if(yr[e][1].exec(r)){t._f+=(i[6]||" ")+yr[e][0];break}r.match(er)&&(t._f+="Z"),bt(t)}else t._isValid=!1}function rt(e){var n=_r.exec(e._i);return null!==n?void(e._d=new Date(+n[1])):(nt(e),void(e._isValid===!1&&(delete e._isValid,t.createFromInputFallback(e))))}function it(t,e,n,r,i,s,a){var o=new Date(t,e,n,r,i,s,a);return 1970>t&&o.setFullYear(t),o}function st(t){var e=new Date(Date.UTC.apply(null,arguments));return 1970>t&&e.setUTCFullYear(t),e}function at(t){return ot(t)?366:365}function ot(t){return t%4===0&&t%100!==0||t%400===0}function ut(){return ot(this.year())}function ct(t,e,n){var r,i=n-e,s=n-t.day();return s>i&&(s-=7),i-7>s&&(s+=7),r=Ct(t).add(s,"d"),{week:Math.ceil(r.dayOfYear()/7),year:r.year()}}function lt(t){return ct(t,this._week.dow,this._week.doy).week}function ht(){return this._week.dow}function pt(){return this._week.doy}function ft(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")}function dt(t){var e=ct(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")}function mt(t,e,n,r,i){var s,a=6+i-r,o=st(t,0,1+a),u=o.getUTCDay();return i>u&&(u+=7),n=null!=n?1*n:i,s=1+a+7*(e-1)-u+n,{year:s>0?t:t-1,dayOfYear:s>0?s:at(t-1)+s}}function gt(t){var e=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")}function vt(t,e,n){return null!=t?t:null!=e?e:n}function yt(t){var e=new Date;return t._useUTC?[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()]:[e.getFullYear(),e.getMonth(),e.getDate()]}function _t(t){var e,n,r,i,s=[];if(!t._d){for(r=yt(t),t._w&&null==t._a[ur]&&null==t._a[or]&&kt(t),t._dayOfYear&&(i=vt(t._a[ar],r[ar]),t._dayOfYear>at(i)&&(c(t)._overflowDayOfYear=!0),n=st(i,0,t._dayOfYear),t._a[or]=n.getUTCMonth(),t._a[ur]=n.getUTCDate()),e=0;3>e&&null==t._a[e];++e)t._a[e]=s[e]=r[e];for(;7>e;e++)t._a[e]=s[e]=null==t._a[e]?2===e?1:0:t._a[e];24===t._a[cr]&&0===t._a[lr]&&0===t._a[hr]&&0===t._a[pr]&&(t._nextDay=!0,t._a[cr]=0),t._d=(t._useUTC?st:it).apply(null,s),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[cr]=24)}}function kt(t){var e,n,r,i,s,a,o;e=t._w,null!=e.GG||null!=e.W||null!=e.E?(s=1,a=4,n=vt(e.GG,t._a[ar],ct(Ct(),1,4).year),r=vt(e.W,1),i=vt(e.E,1)):(s=t._locale._week.dow,a=t._locale._week.doy,n=vt(e.gg,t._a[ar],ct(Ct(),s,a).year),r=vt(e.w,1),null!=e.d?(i=e.d,s>i&&++r):i=null!=e.e?e.e+s:s),o=mt(n,r,i,a,s),t._a[ar]=o.year,t._dayOfYear=o.dayOfYear}function bt(e){if(e._f===t.ISO_8601)return void nt(e);e._a=[],c(e).empty=!0;var n,r,i,s,a,o=""+e._i,u=o.length,l=0;for(i=Y(e._f,e._locale).match(Fn)||[],n=0;n<i.length;n++)s=i[n],r=(o.match(F(s,e))||[])[0],r&&(a=o.substr(0,o.indexOf(r)),a.length>0&&c(e).unusedInput.push(a),o=o.slice(o.indexOf(r)+r.length),l+=r.length),Un[s]?(r?c(e).empty=!1:c(e).unusedTokens.push(s),W(s,r,e)):e._strict&&!r&&c(e).unusedTokens.push(s);c(e).charsLeftOver=u-l,o.length>0&&c(e).unusedInput.push(o),c(e).bigHour===!0&&e._a[cr]<=12&&e._a[cr]>0&&(c(e).bigHour=void 0),e._a[cr]=St(e._locale,e._a[cr],e._meridiem),_t(e),X(e)}function St(t,e,n){var r;return null==n?e:null!=t.meridiemHour?t.meridiemHour(e,n):null!=t.isPM?(r=t.isPM(n),r&&12>e&&(e+=12),r||12!==e||(e=0),e):e}function wt(t){var e,n,r,i,s;if(0===t._f.length)return c(t).invalidFormat=!0,void(t._d=new Date(NaN));for(i=0;i<t._f.length;i++)s=0,e=p({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._f=t._f[i],bt(e),l(e)&&(s+=c(e).charsLeftOver,s+=10*c(e).unusedTokens.length,c(e).score=s,(null==r||r>s)&&(r=s,n=e));a(t,n||e)}function xt(t){if(!t._d){var e=D(t._i);t._a=[e.year,e.month,e.day||e.date,e.hour,e.minute,e.second,e.millisecond],_t(t)}}function Pt(t){var e=new f(X(Mt(t)));return e._nextDay&&(e.add(1,"d"),e._nextDay=void 0),e}function Mt(t){var e=t._i,i=t._f;return t._locale=t._locale||x(t._l),null===e||void 0===i&&""===e?h({nullInput:!0}):("string"==typeof e&&(t._i=e=t._locale.preparse(e)),d(e)?new f(X(e)):(n(i)?wt(t):i?bt(t):r(e)?t._d=e:Dt(t),t))}function Dt(e){var s=e._i;void 0===s?e._d=new Date:r(s)?e._d=new Date(+s):"string"==typeof s?rt(e):n(s)?(e._a=i(s.slice(0),function(t){return parseInt(t,10)}),_t(e)):"object"==typeof s?xt(e):"number"==typeof s?e._d=new Date(s):t.createFromInputFallback(e)}function Et(t,e,n,r,i){var s={};return"boolean"==typeof n&&(r=n,n=void 0),s._isAMomentObject=!0,s._useUTC=s._isUTC=i,s._l=n,s._i=t,s._f=e,s._strict=r,Pt(s)}function Ct(t,e,n,r){return Et(t,e,n,r,!1)}function Ot(t,e){var r,i;if(1===e.length&&n(e[0])&&(e=e[0]),!e.length)return Ct();for(r=e[0],i=1;i<e.length;++i)(!e[i].isValid()||e[i][t](r))&&(r=e[i]);return r}function At(){var t=[].slice.call(arguments,0);return Ot("isBefore",t)}function Tt(){var t=[].slice.call(arguments,0);return Ot("isAfter",t)}function It(t){var e=D(t),n=e.year||0,r=e.quarter||0,i=e.month||0,s=e.week||0,a=e.day||0,o=e.hour||0,u=e.minute||0,c=e.second||0,l=e.millisecond||0;this._milliseconds=+l+1e3*c+6e4*u+36e5*o,this._days=+a+7*s,this._months=+i+3*r+12*n,this._data={},this._locale=x(),this._bubble()}function Nt(t){return t instanceof It}function $t(t,e){I(t,0,0,function(){var t=this.utcOffset(),n="+";return 0>t&&(t=-t,n="-"),n+T(~~(t/60),2)+e+T(~~t%60,2)})}function Lt(t){var e=(t||"").match(er)||[],n=e[e.length-1]||[],r=(n+"").match(xr)||["-",0,0],i=+(60*r[1])+g(r[2]);return"+"===r[0]?i:-i}function Yt(e,n){var i,s;return n._isUTC?(i=n.clone(),s=(d(e)||r(e)?+e:+Ct(e))-+i,i._d.setTime(+i._d+s),t.updateOffset(i,!1),i):Ct(e).local()}function Ht(t){return 15*-Math.round(t._d.getTimezoneOffset()/15)}function Bt(e,n){var r,i=this._offset||0;return null!=e?("string"==typeof e&&(e=Lt(e)),Math.abs(e)<16&&(e=60*e),!this._isUTC&&n&&(r=Ht(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),i!==e&&(!n||this._changeInProgress?ee(this,Kt(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,t.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?i:Ht(this)}function Ft(t,e){return null!=t?("string"!=typeof t&&(t=-t),this.utcOffset(t,e),this):-this.utcOffset()}function jt(t){return this.utcOffset(0,t)}function Rt(t){return this._isUTC&&(this.utcOffset(0,t),this._isUTC=!1,t&&this.subtract(Ht(this),"m")),this}function Ut(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Lt(this._i)),this}function Wt(t){return t=t?Ct(t).utcOffset():0,(this.utcOffset()-t)%60===0}function Vt(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Gt(){if("undefined"!=typeof this._isDSTShifted)return this._isDSTShifted;var t={};if(p(t,this),t=Mt(t),t._a){var e=t._isUTC?o(t._a):Ct(t._a);this._isDSTShifted=this.isValid()&&v(t._a,e.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function zt(){return!this._isUTC}function qt(){return this._isUTC}function Jt(){return this._isUTC&&0===this._offset}function Kt(t,e){var n,r,i,a=t,o=null;return Nt(t)?a={ms:t._milliseconds,d:t._days,M:t._months}:"number"==typeof t?(a={},e?a[e]=t:a.milliseconds=t):(o=Pr.exec(t))?(n="-"===o[1]?-1:1,a={y:0,d:g(o[ur])*n,h:g(o[cr])*n,m:g(o[lr])*n,s:g(o[hr])*n,ms:g(o[pr])*n}):(o=Mr.exec(t))?(n="-"===o[1]?-1:1,a={y:Zt(o[2],n),M:Zt(o[3],n),d:Zt(o[4],n),h:Zt(o[5],n),m:Zt(o[6],n),s:Zt(o[7],n),w:Zt(o[8],n)}):null==a?a={}:"object"==typeof a&&("from"in a||"to"in a)&&(i=Qt(Ct(a.from),Ct(a.to)),a={},a.ms=i.milliseconds,a.M=i.months),r=new It(a),Nt(t)&&s(t,"_locale")&&(r._locale=t._locale),r}function Zt(t,e){var n=t&&parseFloat(t.replace(",","."));return(isNaN(n)?0:n)*e}function Xt(t,e){var n={milliseconds:0,months:0};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=+e-+t.clone().add(n.months,"M"),n}function Qt(t,e){var n;return e=Yt(e,t),t.isBefore(e)?n=Xt(t,e):(n=Xt(e,t),n.milliseconds=-n.milliseconds,n.months=-n.months),n}function te(t,e){return function(n,r){var i,s;return null===r||isNaN(+r)||(et(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period)."),s=n,n=r,r=s),n="string"==typeof n?+n:n,i=Kt(n,r),ee(this,i,t),this}}function ee(e,n,r,i){var s=n._milliseconds,a=n._days,o=n._months;i=null==i?!0:i,s&&e._d.setTime(+e._d+s*r),a&&O(e,"Date",C(e,"Date")+a*r),o&&J(e,C(e,"Month")+o*r),i&&t.updateOffset(e,a||o)}function ne(t,e){var n=t||Ct(),r=Yt(n,this).startOf("day"),i=this.diff(r,"days",!0),s=-6>i?"sameElse":-1>i?"lastWeek":0>i?"lastDay":1>i?"sameDay":2>i?"nextDay":7>i?"nextWeek":"sameElse";return this.format(e&&e[s]||this.localeData().calendar(s,this,Ct(n)))}function re(){return new f(this)}function ie(t,e){var n;return e=M("undefined"!=typeof e?e:"millisecond"),"millisecond"===e?(t=d(t)?t:Ct(t),+this>+t):(n=d(t)?+t:+Ct(t),n<+this.clone().startOf(e))}function se(t,e){var n;return e=M("undefined"!=typeof e?e:"millisecond"),"millisecond"===e?(t=d(t)?t:Ct(t),+t>+this):(n=d(t)?+t:+Ct(t),+this.clone().endOf(e)<n)}function ae(t,e,n){return this.isAfter(t,n)&&this.isBefore(e,n)}function oe(t,e){var n;return e=M(e||"millisecond"),"millisecond"===e?(t=d(t)?t:Ct(t),+this===+t):(n=+Ct(t),+this.clone().startOf(e)<=n&&n<=+this.clone().endOf(e))}function ue(t,e,n){var r,i,s=Yt(t,this),a=6e4*(s.utcOffset()-this.utcOffset());return e=M(e),"year"===e||"month"===e||"quarter"===e?(i=ce(this,s),"quarter"===e?i/=3:"year"===e&&(i/=12)):(r=this-s,i="second"===e?r/1e3:"minute"===e?r/6e4:"hour"===e?r/36e5:"day"===e?(r-a)/864e5:"week"===e?(r-a)/6048e5:r),
n?i:m(i)}function ce(t,e){var n,r,i=12*(e.year()-t.year())+(e.month()-t.month()),s=t.clone().add(i,"months");return 0>e-s?(n=t.clone().add(i-1,"months"),r=(e-s)/(s-n)):(n=t.clone().add(i+1,"months"),r=(e-s)/(n-s)),-(i+r)}function le(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function he(){var t=this.clone().utc();return 0<t.year()&&t.year()<=9999?"function"==typeof Date.prototype.toISOString?this.toDate().toISOString():L(t,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):L(t,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function pe(e){var n=L(this,e||t.defaultFormat);return this.localeData().postformat(n)}function fe(t,e){return this.isValid()?Kt({to:this,from:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()}function de(t){return this.from(Ct(),t)}function me(t,e){return this.isValid()?Kt({from:this,to:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()}function ge(t){return this.to(Ct(),t)}function ve(t){var e;return void 0===t?this._locale._abbr:(e=x(t),null!=e&&(this._locale=e),this)}function ye(){return this._locale}function _e(t){switch(t=M(t)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===t&&this.weekday(0),"isoWeek"===t&&this.isoWeekday(1),"quarter"===t&&this.month(3*Math.floor(this.month()/3)),this}function ke(t){return t=M(t),void 0===t||"millisecond"===t?this:this.startOf(t).add(1,"isoWeek"===t?"week":t).subtract(1,"ms")}function be(){return+this._d-6e4*(this._offset||0)}function Se(){return Math.floor(+this/1e3)}function we(){return this._offset?new Date(+this):this._d}function xe(){var t=this;return[t.year(),t.month(),t.date(),t.hour(),t.minute(),t.second(),t.millisecond()]}function Pe(){var t=this;return{years:t.year(),months:t.month(),date:t.date(),hours:t.hours(),minutes:t.minutes(),seconds:t.seconds(),milliseconds:t.milliseconds()}}function Me(){return l(this)}function De(){return a({},c(this))}function Ee(){return c(this).overflow}function Ce(t,e){I(0,[t,t.length],0,e)}function Oe(t,e,n){return ct(Ct([t,11,31+e-n]),e,n).week}function Ae(t){var e=ct(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==t?e:this.add(t-e,"y")}function Te(t){var e=ct(this,1,4).year;return null==t?e:this.add(t-e,"y")}function Ie(){return Oe(this.year(),1,4)}function Ne(){var t=this.localeData()._week;return Oe(this.year(),t.dow,t.doy)}function $e(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)}function Le(t,e){return"string"!=typeof t?t:isNaN(t)?(t=e.weekdaysParse(t),"number"==typeof t?t:null):parseInt(t,10)}function Ye(t){return this._weekdays[t.day()]}function He(t){return this._weekdaysShort[t.day()]}function Be(t){return this._weekdaysMin[t.day()]}function Fe(t){var e,n,r;for(this._weekdaysParse=this._weekdaysParse||[],e=0;7>e;e++)if(this._weekdaysParse[e]||(n=Ct([2e3,1]).day(e),r="^"+this.weekdays(n,"")+"|^"+this.weekdaysShort(n,"")+"|^"+this.weekdaysMin(n,""),this._weekdaysParse[e]=new RegExp(r.replace(".",""),"i")),this._weekdaysParse[e].test(t))return e}function je(t){var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=Le(t,this.localeData()),this.add(t-e,"d")):e}function Re(t){var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")}function Ue(t){return null==t?this.day()||7:this.day(this.day()%7?t:t-7)}function We(t,e){I(t,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),e)})}function Ve(t,e){return e._meridiemParse}function Ge(t){return"p"===(t+"").toLowerCase().charAt(0)}function ze(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"}function qe(t,e){e[pr]=g(1e3*("0."+t))}function Je(){return this._isUTC?"UTC":""}function Ke(){return this._isUTC?"Coordinated Universal Time":""}function Ze(t){return Ct(1e3*t)}function Xe(){return Ct.apply(null,arguments).parseZone()}function Qe(t,e,n){var r=this._calendar[t];return"function"==typeof r?r.call(e,n):r}function tn(t){var e=this._longDateFormat[t],n=this._longDateFormat[t.toUpperCase()];return e||!n?e:(this._longDateFormat[t]=n.replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t])}function en(){return this._invalidDate}function nn(t){return this._ordinal.replace("%d",t)}function rn(t){return t}function sn(t,e,n,r){var i=this._relativeTime[n];return"function"==typeof i?i(t,e,n,r):i.replace(/%d/i,t)}function an(t,e){var n=this._relativeTime[t>0?"future":"past"];return"function"==typeof n?n(e):n.replace(/%s/i,e)}function on(t){var e,n;for(n in t)e=t[n],"function"==typeof e?this[n]=e:this["_"+n]=e;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function un(t,e,n,r){var i=x(),s=o().set(r,e);return i[n](s,t)}function cn(t,e,n,r,i){if("number"==typeof t&&(e=t,t=void 0),t=t||"",null!=e)return un(t,e,n,i);var s,a=[];for(s=0;r>s;s++)a[s]=un(t,s,n,i);return a}function ln(t,e){return cn(t,e,"months",12,"month")}function hn(t,e){return cn(t,e,"monthsShort",12,"month")}function pn(t,e){return cn(t,e,"weekdays",7,"day")}function fn(t,e){return cn(t,e,"weekdaysShort",7,"day")}function dn(t,e){return cn(t,e,"weekdaysMin",7,"day")}function mn(){var t=this._data;return this._milliseconds=Jr(this._milliseconds),this._days=Jr(this._days),this._months=Jr(this._months),t.milliseconds=Jr(t.milliseconds),t.seconds=Jr(t.seconds),t.minutes=Jr(t.minutes),t.hours=Jr(t.hours),t.months=Jr(t.months),t.years=Jr(t.years),this}function gn(t,e,n,r){var i=Kt(e,n);return t._milliseconds+=r*i._milliseconds,t._days+=r*i._days,t._months+=r*i._months,t._bubble()}function vn(t,e){return gn(this,t,e,1)}function yn(t,e){return gn(this,t,e,-1)}function _n(t){return 0>t?Math.floor(t):Math.ceil(t)}function kn(){var t,e,n,r,i,s=this._milliseconds,a=this._days,o=this._months,u=this._data;return s>=0&&a>=0&&o>=0||0>=s&&0>=a&&0>=o||(s+=864e5*_n(Sn(o)+a),a=0,o=0),u.milliseconds=s%1e3,t=m(s/1e3),u.seconds=t%60,e=m(t/60),u.minutes=e%60,n=m(e/60),u.hours=n%24,a+=m(n/24),i=m(bn(a)),o+=i,a-=_n(Sn(i)),r=m(o/12),o%=12,u.days=a,u.months=o,u.years=r,this}function bn(t){return 4800*t/146097}function Sn(t){return 146097*t/4800}function wn(t){var e,n,r=this._milliseconds;if(t=M(t),"month"===t||"year"===t)return e=this._days+r/864e5,n=this._months+bn(e),"month"===t?n:n/12;switch(e=this._days+Math.round(Sn(this._months)),t){case"week":return e/7+r/6048e5;case"day":return e+r/864e5;case"hour":return 24*e+r/36e5;case"minute":return 1440*e+r/6e4;case"second":return 86400*e+r/1e3;case"millisecond":return Math.floor(864e5*e)+r;default:throw new Error("Unknown unit "+t)}}function xn(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*g(this._months/12)}function Pn(t){return function(){return this.as(t)}}function Mn(t){return t=M(t),this[t+"s"]()}function Dn(t){return function(){return this._data[t]}}function En(){return m(this.days()/7)}function Cn(t,e,n,r,i){return i.relativeTime(e||1,!!n,t,r)}function On(t,e,n){var r=Kt(t).abs(),i=hi(r.as("s")),s=hi(r.as("m")),a=hi(r.as("h")),o=hi(r.as("d")),u=hi(r.as("M")),c=hi(r.as("y")),l=i<pi.s&&["s",i]||1===s&&["m"]||s<pi.m&&["mm",s]||1===a&&["h"]||a<pi.h&&["hh",a]||1===o&&["d"]||o<pi.d&&["dd",o]||1===u&&["M"]||u<pi.M&&["MM",u]||1===c&&["y"]||["yy",c];return l[2]=e,l[3]=+t>0,l[4]=n,Cn.apply(null,l)}function An(t,e){return void 0===pi[t]?!1:void 0===e?pi[t]:(pi[t]=e,!0)}function Tn(t){var e=this.localeData(),n=On(this,!t,e);return t&&(n=e.pastFuture(+this,n)),e.postformat(n)}function In(){var t,e,n,r=fi(this._milliseconds)/1e3,i=fi(this._days),s=fi(this._months);t=m(r/60),e=m(t/60),r%=60,t%=60,n=m(s/12),s%=12;var a=n,o=s,u=i,c=e,l=t,h=r,p=this.asSeconds();return p?(0>p?"-":"")+"P"+(a?a+"Y":"")+(o?o+"M":"")+(u?u+"D":"")+(c||l||h?"T":"")+(c?c+"H":"")+(l?l+"M":"")+(h?h+"S":""):"P0D"}var Nn,$n,Ln=t.momentProperties=[],Yn=!1,Hn={},Bn={},Fn=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,jn=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Rn={},Un={},Wn=/\d/,Vn=/\d\d/,Gn=/\d{3}/,zn=/\d{4}/,qn=/[+-]?\d{6}/,Jn=/\d\d?/,Kn=/\d{1,3}/,Zn=/\d{1,4}/,Xn=/[+-]?\d{1,6}/,Qn=/\d+/,tr=/[+-]?\d+/,er=/Z|[+-]\d\d:?\d\d/gi,nr=/[+-]?\d+(\.\d{1,3})?/,rr=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,ir={},sr={},ar=0,or=1,ur=2,cr=3,lr=4,hr=5,pr=6;I("M",["MM",2],"Mo",function(){return this.month()+1}),I("MMM",0,0,function(t){return this.localeData().monthsShort(this,t)}),I("MMMM",0,0,function(t){return this.localeData().months(this,t)}),P("month","M"),B("M",Jn),B("MM",Jn,Vn),B("MMM",rr),B("MMMM",rr),R(["M","MM"],function(t,e){e[or]=g(t)-1}),R(["MMM","MMMM"],function(t,e,n,r){var i=n._locale.monthsParse(t,r,n._strict);null!=i?e[or]=i:c(n).invalidMonth=t});var fr="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),dr="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),mr={};t.suppressDeprecationWarnings=!1;var gr=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,vr=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],yr=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],_r=/^\/?Date\((\-?\d+)/i;t.createFromInputFallback=tt("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))}),I(0,["YY",2],0,function(){return this.year()%100}),I(0,["YYYY",4],0,"year"),I(0,["YYYYY",5],0,"year"),I(0,["YYYYYY",6,!0],0,"year"),P("year","y"),B("Y",tr),B("YY",Jn,Vn),B("YYYY",Zn,zn),B("YYYYY",Xn,qn),B("YYYYYY",Xn,qn),R(["YYYYY","YYYYYY"],ar),R("YYYY",function(e,n){n[ar]=2===e.length?t.parseTwoDigitYear(e):g(e)}),R("YY",function(e,n){n[ar]=t.parseTwoDigitYear(e)}),t.parseTwoDigitYear=function(t){return g(t)+(g(t)>68?1900:2e3)};var kr=E("FullYear",!1);I("w",["ww",2],"wo","week"),I("W",["WW",2],"Wo","isoWeek"),P("week","w"),P("isoWeek","W"),B("w",Jn),B("ww",Jn,Vn),B("W",Jn),B("WW",Jn,Vn),U(["w","ww","W","WW"],function(t,e,n,r){e[r.substr(0,1)]=g(t)});var br={dow:0,doy:6};I("DDD",["DDDD",3],"DDDo","dayOfYear"),P("dayOfYear","DDD"),B("DDD",Kn),B("DDDD",Gn),R(["DDD","DDDD"],function(t,e,n){n._dayOfYear=g(t)}),t.ISO_8601=function(){};var Sr=tt("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var t=Ct.apply(null,arguments);return this>t?this:t}),wr=tt("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var t=Ct.apply(null,arguments);return t>this?this:t});$t("Z",":"),$t("ZZ",""),B("Z",er),B("ZZ",er),R(["Z","ZZ"],function(t,e,n){n._useUTC=!0,n._tzm=Lt(t)});var xr=/([\+\-]|\d\d)/gi;t.updateOffset=function(){};var Pr=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,Mr=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Kt.fn=It.prototype;var Dr=te(1,"add"),Er=te(-1,"subtract");t.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var Cr=tt("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(t){return void 0===t?this.localeData():this.locale(t)});I(0,["gg",2],0,function(){return this.weekYear()%100}),I(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Ce("gggg","weekYear"),Ce("ggggg","weekYear"),Ce("GGGG","isoWeekYear"),Ce("GGGGG","isoWeekYear"),P("weekYear","gg"),P("isoWeekYear","GG"),B("G",tr),B("g",tr),B("GG",Jn,Vn),B("gg",Jn,Vn),B("GGGG",Zn,zn),B("gggg",Zn,zn),B("GGGGG",Xn,qn),B("ggggg",Xn,qn),U(["gggg","ggggg","GGGG","GGGGG"],function(t,e,n,r){e[r.substr(0,2)]=g(t)}),U(["gg","GG"],function(e,n,r,i){n[i]=t.parseTwoDigitYear(e)}),I("Q",0,0,"quarter"),P("quarter","Q"),B("Q",Wn),R("Q",function(t,e){e[or]=3*(g(t)-1)}),I("D",["DD",2],"Do","date"),P("date","D"),B("D",Jn),B("DD",Jn,Vn),B("Do",function(t,e){return t?e._ordinalParse:e._ordinalParseLenient}),R(["D","DD"],ur),R("Do",function(t,e){e[ur]=g(t.match(Jn)[0],10)});var Or=E("Date",!0);I("d",0,"do","day"),I("dd",0,0,function(t){return this.localeData().weekdaysMin(this,t)}),I("ddd",0,0,function(t){return this.localeData().weekdaysShort(this,t)}),I("dddd",0,0,function(t){return this.localeData().weekdays(this,t)}),I("e",0,0,"weekday"),I("E",0,0,"isoWeekday"),P("day","d"),P("weekday","e"),P("isoWeekday","E"),B("d",Jn),B("e",Jn),B("E",Jn),B("dd",rr),B("ddd",rr),B("dddd",rr),U(["dd","ddd","dddd"],function(t,e,n){var r=n._locale.weekdaysParse(t);null!=r?e.d=r:c(n).invalidWeekday=t}),U(["d","e","E"],function(t,e,n,r){e[r]=g(t)});var Ar="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Tr="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Ir="Su_Mo_Tu_We_Th_Fr_Sa".split("_");I("H",["HH",2],0,"hour"),I("h",["hh",2],0,function(){return this.hours()%12||12}),We("a",!0),We("A",!1),P("hour","h"),B("a",Ve),B("A",Ve),B("H",Jn),B("h",Jn),B("HH",Jn,Vn),B("hh",Jn,Vn),R(["H","HH"],cr),R(["a","A"],function(t,e,n){n._isPm=n._locale.isPM(t),n._meridiem=t}),R(["h","hh"],function(t,e,n){e[cr]=g(t),c(n).bigHour=!0});var Nr=/[ap]\.?m?\.?/i,$r=E("Hours",!0);I("m",["mm",2],0,"minute"),P("minute","m"),B("m",Jn),B("mm",Jn,Vn),R(["m","mm"],lr);var Lr=E("Minutes",!1);I("s",["ss",2],0,"second"),P("second","s"),B("s",Jn),B("ss",Jn,Vn),R(["s","ss"],hr);var Yr=E("Seconds",!1);I("S",0,0,function(){return~~(this.millisecond()/100)}),I(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),I(0,["SSS",3],0,"millisecond"),I(0,["SSSS",4],0,function(){return 10*this.millisecond()}),I(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),I(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),I(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),I(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),I(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),P("millisecond","ms"),B("S",Kn,Wn),B("SS",Kn,Vn),B("SSS",Kn,Gn);var Hr;for(Hr="SSSS";Hr.length<=9;Hr+="S")B(Hr,Qn);for(Hr="S";Hr.length<=9;Hr+="S")R(Hr,qe);var Br=E("Milliseconds",!1);I("z",0,0,"zoneAbbr"),I("zz",0,0,"zoneName");var Fr=f.prototype;Fr.add=Dr,Fr.calendar=ne,Fr.clone=re,Fr.diff=ue,Fr.endOf=ke,Fr.format=pe,Fr.from=fe,Fr.fromNow=de,Fr.to=me,Fr.toNow=ge,Fr.get=A,Fr.invalidAt=Ee,Fr.isAfter=ie,Fr.isBefore=se,Fr.isBetween=ae,Fr.isSame=oe,Fr.isValid=Me,Fr.lang=Cr,Fr.locale=ve,Fr.localeData=ye,Fr.max=wr,Fr.min=Sr,Fr.parsingFlags=De,Fr.set=A,Fr.startOf=_e,Fr.subtract=Er,Fr.toArray=xe,Fr.toObject=Pe,Fr.toDate=we,Fr.toISOString=he,Fr.toJSON=he,Fr.toString=le,Fr.unix=Se,Fr.valueOf=be,Fr.year=kr,Fr.isLeapYear=ut,Fr.weekYear=Ae,Fr.isoWeekYear=Te,Fr.quarter=Fr.quarters=$e,Fr.month=K,Fr.daysInMonth=Z,Fr.week=Fr.weeks=ft,Fr.isoWeek=Fr.isoWeeks=dt,Fr.weeksInYear=Ne,Fr.isoWeeksInYear=Ie,Fr.date=Or,Fr.day=Fr.days=je,Fr.weekday=Re,Fr.isoWeekday=Ue,Fr.dayOfYear=gt,Fr.hour=Fr.hours=$r,Fr.minute=Fr.minutes=Lr,Fr.second=Fr.seconds=Yr,Fr.millisecond=Fr.milliseconds=Br,Fr.utcOffset=Bt,Fr.utc=jt,Fr.local=Rt,Fr.parseZone=Ut,Fr.hasAlignedHourOffset=Wt,Fr.isDST=Vt,Fr.isDSTShifted=Gt,Fr.isLocal=zt,Fr.isUtcOffset=qt,Fr.isUtc=Jt,Fr.isUTC=Jt,Fr.zoneAbbr=Je,Fr.zoneName=Ke,Fr.dates=tt("dates accessor is deprecated. Use date instead.",Or),Fr.months=tt("months accessor is deprecated. Use month instead",K),Fr.years=tt("years accessor is deprecated. Use year instead",kr),Fr.zone=tt("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",Ft);var jr=Fr,Rr={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},Ur={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},Wr="Invalid date",Vr="%d",Gr=/\d{1,2}/,zr={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},qr=y.prototype;qr._calendar=Rr,qr.calendar=Qe,qr._longDateFormat=Ur,qr.longDateFormat=tn,qr._invalidDate=Wr,qr.invalidDate=en,qr._ordinal=Vr,qr.ordinal=nn,qr._ordinalParse=Gr,qr.preparse=rn,qr.postformat=rn,qr._relativeTime=zr,qr.relativeTime=sn,qr.pastFuture=an,qr.set=on,qr.months=G,qr._months=fr,qr.monthsShort=z,qr._monthsShort=dr,qr.monthsParse=q,qr.week=lt,qr._week=br,qr.firstDayOfYear=pt,qr.firstDayOfWeek=ht,qr.weekdays=Ye,qr._weekdays=Ar,qr.weekdaysMin=Be,qr._weekdaysMin=Ir,qr.weekdaysShort=He,qr._weekdaysShort=Tr,qr.weekdaysParse=Fe,qr.isPM=Ge,qr._meridiemParse=Nr,qr.meridiem=ze,S("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10,n=1===g(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+n}}),t.lang=tt("moment.lang is deprecated. Use moment.locale instead.",S),t.langData=tt("moment.langData is deprecated. Use moment.localeData instead.",x);var Jr=Math.abs,Kr=Pn("ms"),Zr=Pn("s"),Xr=Pn("m"),Qr=Pn("h"),ti=Pn("d"),ei=Pn("w"),ni=Pn("M"),ri=Pn("y"),ii=Dn("milliseconds"),si=Dn("seconds"),ai=Dn("minutes"),oi=Dn("hours"),ui=Dn("days"),ci=Dn("months"),li=Dn("years"),hi=Math.round,pi={s:45,m:45,h:22,d:26,M:11},fi=Math.abs,di=It.prototype;di.abs=mn,di.add=vn,di.subtract=yn,di.as=wn,di.asMilliseconds=Kr,di.asSeconds=Zr,di.asMinutes=Xr,di.asHours=Qr,di.asDays=ti,di.asWeeks=ei,di.asMonths=ni,di.asYears=ri,di.valueOf=xn,di._bubble=kn,di.get=Mn,di.milliseconds=ii,di.seconds=si,di.minutes=ai,di.hours=oi,di.days=ui,di.weeks=En,di.months=ci,di.years=li,di.humanize=Tn,di.toISOString=In,di.toString=In,di.toJSON=In,di.locale=ve,di.localeData=ye,di.toIsoString=tt("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",In),di.lang=Cr,I("X",0,0,"unix"),I("x",0,0,"valueOf"),B("x",tr),B("X",nr),R("X",function(t,e,n){n._d=new Date(1e3*parseFloat(t,10))}),R("x",function(t,e,n){n._d=new Date(g(t))}),t.version="2.10.6",e(Ct),t.fn=jr,t.min=At,t.max=Tt,t.utc=o,t.unix=Ze,t.months=ln,t.isDate=r,t.locale=S,t.invalid=h,t.duration=Kt,t.isMoment=d,t.weekdays=pn,t.parseZone=Xe,t.localeData=x,t.isDuration=Nt,t.monthsShort=hn,t.weekdaysMin=dn,t.defineLocale=w,t.weekdaysShort=fn,t.normalizeUnits=M,t.relativeTimeThreshold=An;var mi=t;return mi});var App=App||{};App.Collection||(App.Collection={}),App.Model||(App.Model={}),App.View||(App.View={}),App.Router||(App.Router={});var app=app||{};app.collection=app.collection||{},app.model=app.model||{},app.view=app.view||{},app.router=app.router||{},App.Model.User=Backbone.Model.extend({defaults:{username:"",password:""}}),App.Model.Task=Backbone.Model.extend({urlRoot:"task",initialize:function(){},defaults:{user:"",title:"",description:"",due:"",untilDueTime:0,untilDuePretty:"",open:!0,star:!1}}),App.Collection.Task=Backbone.Collection.extend({model:App.Model.Task,initialize:function(){},url:function(){return"/collection/"+Cookies.get("todo")}}),App.View.Login=Backbone.View.extend({tagName:"section",className:"login-view",template:Handlebars.compile($("#login-template").html()),initialize:function(){this.render()},render:function(){this.$el.html(this.template({})),$("#body-wrap").append(this.$el),Cookies.set("todo")||$("#modal1").openModal()},events:{"click button":"submitForm"},submitForm:function(t){t.preventDefault();var e={username:$("#username").val().toLowerCase(),password:$("#password").val().toLowerCase()};$.ajax({url:"/login",data:e,type:"POST"}).done(function(t){1==t&&(Cookies.set("todo",e.username),app.router.navigate("tasks",{trigger:!0}))})}}),App.View.TaskWindow=Backbone.View.extend({tagName:"section",className:"taskWindowView",template:Handlebars.compile($("#task-window-template").html()),initialize:function(){this.render(),$(".datepicker").pickadate({selectMonths:!0,selectYears:15}),app.collection.task=new App.Collection.Task,app.collection.task.fetch({success:function(t,e,n){app.collection.task.forEach(function(t){if(t.get("due")){var e=moment().get("year").toString(),n=moment().get("month")+1;n=n.toString();var r=moment().get("date"),i=moment(e+"-"+n+"-"+r),s=t.get("due"),a=i.to(s);t.set("untilDuePretty",a);var o=i.diff(s,"days");t.set("untilDueTime",o)}});var r=_.sortBy(app.collection.task.toJSON(),"untilDueTime");app.collection.task.reset(r);var i=app.collection.task.where({open:!1});if(i.length>20){var s=i.pop();s.destroy({success:function(t,e){}})}app.collection.task.forEach(function(t){app.view.task=new App.View.Task({model:t})}),function(){var t=app.collection.task.pluck("open"),e=0;t.forEach(function(t){t===!1&&(e+=1)}),$("#closed-task-header").html("View Recently Completed Tasks ("+e+")")}()},failure:function(t,e,n){}}),app.collection.task.on("change:open",function(){var t=app.collection.task.pluck("open"),e=0;t.forEach(function(t){t===!1&&(e+=1)}),$("#closed-task-header").html("Recently Completed Tasks ("+e+")")})},render:function(){this.$el.html(this.template({})),$("#body-wrap").append(this.$el)},events:{"click #star-wrap":"toggleStar","click #submit-button":"createTask","click label":"toggleActive","click #closed-task-header":"toggleClosedTask","click #purge":"purge"},toggleClosedTask:function(t){$("#closed-task-div").toggle()},toggleActive:function(t){$(t.target).parent("div").children("label").addClass("active"),$(t.target).parent("div").children("textarea").focus()},toggleStar:function(){event.preventDefault(),$("#star-wrap i").toggleClass("star-true")},createTask:function(t){t.preventDefault();var e,n=Cookies.get("todo"),r=$("#task-title-wrap textarea").val(),i=$("#task-description").val();$("#star-wrap i").hasClass("star-true")&&(e=!0);var s=$("#task-due").val();if(s){s=s.split(" ");var a=parseInt(s[0]),o=s[1].slice(0,-1),u=s[2];switch(o){case"January":o="1";break;case"February":o="2";break;case"March":o="3";break;case"April":o="4";break;case"May":o="5";break;case"June":o="6";break;case"July":o="7";break;case"August":o="8";break;case"September":o="9";break;case"October":o="10";break;case"November":o="11";break;case"December":o="12"}s=u+"-"+o+"-"+a}app.model.task=new App.Model.Task({user:n,title:r,description:i,due:s,star:e}),app.model.task.save({},{wait:!0}).done(function(t){app.collection.task.add(app.model.task),app.view.task=new App.View.Task({model:app.model.task});$("#task-title-wrap textarea").val(""),$("#task-description").val(""),$("#task-due").val("");$("#star-wrap i").hasClass("star-true")&&$("#star-wrap i").removeClass("star-true")}).fail(function(t){alert("error saving task")})}}),App.View.Task=Backbone.View.extend({tagName:"section",className:"taskView",template:Handlebars.compile($("#task-template").html()),initialize:function(){this.render()},render:function(){if(this.model.get("due")){var t=moment().get("year").toString(),e=moment().get("month")+1;e=e.toString();var n=moment().get("date"),r=moment(t+"-"+e+"-"+n),i=this.model.get("due"),s=r.to(i);this.model.set("untilDuePretty",s)}this.$el.html(this.template(this.model.toJSON())),this.model.toJSON().open===!0?$("#open-task-div").prepend(this.$el):$("#closed-task-div").prepend(this.$el)},events:{"click #extend-wrap":"toggleDescription","click #task-complete":"complete","click #star-wrap-task i":"starTask","click #purge":"purge"},purge:function(){this.remove(),this.model.destroy(),function(){var t=app.collection.task.pluck("open"),e=0;t.forEach(function(t){t===!1&&(e+=1)}),$("#closed-task-header").html("View Recently Completed Tasks ("+e+")")}()},starTask:function(t){var e=this;$(t.target).hasClass("ion-ios-star")?$(t.target).removeClass().addClass("icon ion-ios-star-outline"):$(t.target).removeClass().addClass("ion-ios-star"),this.model.get("star")===!0?e.model.set("star",!1):e.model.set("star",!0),this.model.get("open")===!0&&e.model.save().done(function(t){}).fail(function(t){})},toggleDescription:function(t){var e=$(t.target).parents("li");e.find("#task-body-div").fadeToggle(250,function(){e.find("#extend").hasClass("ion-arrow-down-b")?e.find("#extend").removeClass().addClass("icon ion-arrow-up-b"):e.find("#extend").removeClass().addClass("icon ion-arrow-down-b")})},complete:function(t){var e=this;e.remove(),this.model.get("open")===!0?e.model.set("open",!1):e.model.set("open",!0),this.model.save().done(function(t){var n=e.model;app.view.task=new App.View.Task({model:n})}).fail(function(t){alert("error saving task"),this.model.get("open")===!0?e.model.set("open",!1):e.model.set("open",!0);var n=e.model;app.view.task=new App.View.Task({model:n})})}}),App.Router.Router=Backbone.Router.extend({routes:{"":"index",tasks:"tasks",removeAllViews:"removeAllViews"},removeAllViews:function(){for(var t in app.view)app.view[t].remove(),delete app.view[t]},index:function(){this.removeAllViews(),app.view.login=new App.View.Login},tasks:function(){Cookies.get("todo")?(this.removeAllViews(),app.view.taskWindow=new App.View.TaskWindow):app.router.navigate("",{trigger:!0})}});var App=App||{},app=app||{};app.router=new App.Router.Router,$(document).ready(function(){Backbone.history.start(),app.router.navigate(Backbone.history.getFragment(),{trigger:!0}),$(".button-collapse").sideNav()});
//# sourceMappingURL=data:application/json;base64,
